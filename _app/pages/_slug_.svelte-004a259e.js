import{S as Bn,i as Nn,s as Jn,e,t as d,k as r,c as o,a as c,h as m,d as s,m as k,M as ks,b as C,g as p,F as a,G as Tn,w as fs,x as ds,y as ms,q as yn,o as Dn,B as ys,p as hs,n as ws}from"../chunks/vendor-cac58433.js";function Is(P){let l,w,f,u,y,v,_,hn,g,E,nn,on,b,T,wn,ln,U,_n,cn,H,sn,vn,an,tn,bn,O,B,un,D,N,rn,I,$,J,Rn,K,Q,xn,V,M,Pn=`<code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _parents<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        _parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            _parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> xRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> yRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xRoot <span class="token operator">==</span> yRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        _parents<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">=</span> yRoot<span class="token punctuation">;</span>
        _count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,q,W,kn,L,j,En,fn,A,X,Un,Y,z,$n=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> x<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// path compression</span>
	_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> _parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,F,dn,t,h,pn,jn,In,x,Mn=`<code class="language-cs"><span class="token comment">//...</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _parents<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _ranks<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	_parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
	    _ranks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//...</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> xRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> yRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>xRoot <span class="token operator">==</span> yRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// union by rank</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _ranks<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">=</span> yRoot<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">></span> _ranks<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>
		_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ln,en,An,Hn,G,S,Z,Fn,Sn,mn,R,Cn;return{c(){l=e("h1"),w=d("Disjoint sets"),f=r(),u=e("p"),y=d("Disjoint Sets or Union find is a data structure used for finding relationships between nodes."),v=r(),_=e("p"),hn=d("For example disjointed sets are ideal for the following scenarios:"),g=r(),E=e("ul"),nn=e("li"),on=d("find if a person is a direct or indirect friend of another person in a social platform"),b=r(),T=e("li"),wn=d("given a list of flights find if there is a way to reach a destination starting from a given city"),ln=r(),U=e("p"),_n=d("Disjoint Sets or Union find implements 2 methods:"),cn=r(),H=e("ul"),sn=e("li"),vn=d("find - returns the union representative"),an=r(),tn=e("li"),bn=d("union - connects two nodes"),O=r(),B=e("p"),un=d("Time complexity for both find and union is smaller than O(log n) or amortized O(1) if union by rank and path compression is used."),D=r(),N=e("p"),rn=d("An array is used to represent the parents of the disjointed sets. This is how the parents array would look after the union operation is performed on the blue and red nodes:"),I=r(),$=e("p"),J=e("img"),K=r(),Q=e("h4"),xn=d("Code example:"),V=r(),M=e("pre"),q=r(),W=e("h4"),kn=d("Path compression"),L=r(),j=e("p"),En=d("An optimization that aims to flatten the traveral tree to the height of one so that all find operation would be completed in constant time."),fn=r(),A=e("p"),X=e("img"),Y=r(),z=e("pre"),F=r(),dn=e("h4"),t=d("Union by rank"),h=r(),pn=e("p"),jn=d("This optimization aims to always attached the smaller tree to the bigger one. An additional array is required to store the ranks of each tree."),In=r(),x=e("pre"),Ln=r(),en=e("h4"),An=d("Problems that could be solved with union find"),Hn=r(),G=e("ul"),S=e("li"),Z=e("a"),Fn=d("https://leetcode.com/problems/number-of-provinces/submissions/"),Sn=r(),mn=e("li"),R=e("a"),Cn=d("https://leetcode.com/problems/longest-consecutive-sequence/submissions/"),this.h()},l(n){l=o(n,"H1",{});var i=c(l);w=m(i,"Disjoint sets"),i.forEach(s),f=k(n),u=o(n,"P",{});var qn=c(u);y=m(qn,"Disjoint Sets or Union find is a data structure used for finding relationships between nodes."),qn.forEach(s),v=k(n),_=o(n,"P",{});var Kn=c(_);hn=m(Kn,"For example disjointed sets are ideal for the following scenarios:"),Kn.forEach(s),g=k(n),E=o(n,"UL",{});var zn=c(E);nn=o(zn,"LI",{});var Qn=c(nn);on=m(Qn,"find if a person is a direct or indirect friend of another person in a social platform"),Qn.forEach(s),b=k(zn),T=o(zn,"LI",{});var Vn=c(T);wn=m(Vn,"given a list of flights find if there is a way to reach a destination starting from a given city"),Vn.forEach(s),zn.forEach(s),ln=k(n),U=o(n,"P",{});var Wn=c(U);_n=m(Wn,"Disjoint Sets or Union find implements 2 methods:"),Wn.forEach(s),cn=k(n),H=o(n,"UL",{});var Gn=c(H);sn=o(Gn,"LI",{});var Xn=c(sn);vn=m(Xn,"find - returns the union representative"),Xn.forEach(s),an=k(Gn),tn=o(Gn,"LI",{});var Yn=c(tn);bn=m(Yn,"union - connects two nodes"),Yn.forEach(s),Gn.forEach(s),O=k(n),B=o(n,"P",{});var Zn=c(B);un=m(Zn,"Time complexity for both find and union is smaller than O(log n) or amortized O(1) if union by rank and path compression is used."),Zn.forEach(s),D=k(n),N=o(n,"P",{});var gn=c(N);rn=m(gn,"An array is used to represent the parents of the disjointed sets. This is how the parents array would look after the union operation is performed on the blue and red nodes:"),gn.forEach(s),I=k(n),$=o(n,"P",{});var ns=c($);J=o(ns,"IMG",{src:!0,alt:!0}),ns.forEach(s),K=k(n),Q=o(n,"H4",{});var ss=c(Q);xn=m(ss,"Code example:"),ss.forEach(s),V=k(n),M=o(n,"PRE",{class:!0});var bs=c(M);bs.forEach(s),q=k(n),W=o(n,"H4",{});var as=c(W);kn=m(as,"Path compression"),as.forEach(s),L=k(n),j=o(n,"P",{});var ts=c(j);En=m(ts,"An optimization that aims to flatten the traveral tree to the height of one so that all find operation would be completed in constant time."),ts.forEach(s),fn=k(n),A=o(n,"P",{});var ps=c(A);X=o(ps,"IMG",{src:!0,alt:!0}),ps.forEach(s),Y=k(n),z=o(n,"PRE",{class:!0});var xs=c(z);xs.forEach(s),F=k(n),dn=o(n,"H4",{});var es=c(dn);t=m(es,"Union by rank"),es.forEach(s),h=k(n),pn=o(n,"P",{});var os=c(pn);jn=m(os,"This optimization aims to always attached the smaller tree to the bigger one. An additional array is required to store the ranks of each tree."),os.forEach(s),In=k(n),x=o(n,"PRE",{class:!0});var Es=c(x);Es.forEach(s),Ln=k(n),en=o(n,"H4",{});var ls=c(en);An=m(ls,"Problems that could be solved with union find"),ls.forEach(s),Hn=k(n),G=o(n,"UL",{});var On=c(G);S=o(On,"LI",{});var cs=c(S);Z=o(cs,"A",{href:!0,rel:!0});var is=c(Z);Fn=m(is,"https://leetcode.com/problems/number-of-provinces/submissions/"),is.forEach(s),cs.forEach(s),Sn=k(On),mn=o(On,"LI",{});var us=c(mn);R=o(us,"A",{href:!0,rel:!0});var rs=c(R);Cn=m(rs,"https://leetcode.com/problems/longest-consecutive-sequence/submissions/"),rs.forEach(s),us.forEach(s),On.forEach(s),this.h()},h(){ks(J.src,Rn="/DisjointSetsImg.svg")||C(J,"src",Rn),C(J,"alt","image"),C(M,"class","language-cs"),ks(X.src,Un="/DisjointSetCompImg.svg")||C(X,"src",Un),C(X,"alt","image"),C(z,"class","language-cs"),C(x,"class","language-cs"),C(Z,"href","https://leetcode.com/problems/number-of-provinces/submissions/"),C(Z,"rel","nofollow"),C(R,"href","https://leetcode.com/problems/longest-consecutive-sequence/submissions/"),C(R,"rel","nofollow")},m(n,i){p(n,l,i),a(l,w),p(n,f,i),p(n,u,i),a(u,y),p(n,v,i),p(n,_,i),a(_,hn),p(n,g,i),p(n,E,i),a(E,nn),a(nn,on),a(E,b),a(E,T),a(T,wn),p(n,ln,i),p(n,U,i),a(U,_n),p(n,cn,i),p(n,H,i),a(H,sn),a(sn,vn),a(H,an),a(H,tn),a(tn,bn),p(n,O,i),p(n,B,i),a(B,un),p(n,D,i),p(n,N,i),a(N,rn),p(n,I,i),p(n,$,i),a($,J),p(n,K,i),p(n,Q,i),a(Q,xn),p(n,V,i),p(n,M,i),M.innerHTML=Pn,p(n,q,i),p(n,W,i),a(W,kn),p(n,L,i),p(n,j,i),a(j,En),p(n,fn,i),p(n,A,i),a(A,X),p(n,Y,i),p(n,z,i),z.innerHTML=$n,p(n,F,i),p(n,dn,i),a(dn,t),p(n,h,i),p(n,pn,i),a(pn,jn),p(n,In,i),p(n,x,i),x.innerHTML=Mn,p(n,Ln,i),p(n,en,i),a(en,An),p(n,Hn,i),p(n,G,i),a(G,S),a(S,Z),a(Z,Fn),a(G,Sn),a(G,mn),a(mn,R),a(R,Cn)},p:Tn,i:Tn,o:Tn,d(n){n&&s(l),n&&s(f),n&&s(u),n&&s(v),n&&s(_),n&&s(g),n&&s(E),n&&s(ln),n&&s(U),n&&s(cn),n&&s(H),n&&s(O),n&&s(B),n&&s(D),n&&s(N),n&&s(I),n&&s($),n&&s(K),n&&s(Q),n&&s(V),n&&s(M),n&&s(q),n&&s(W),n&&s(L),n&&s(j),n&&s(fn),n&&s(A),n&&s(Y),n&&s(z),n&&s(F),n&&s(dn),n&&s(h),n&&s(pn),n&&s(In),n&&s(x),n&&s(Ln),n&&s(en),n&&s(Hn),n&&s(G)}}}class Ls extends Bn{constructor(l){super();Nn(this,l,null,Is,Jn,{})}}function Hs(P){let l,w,f,u,y,v,_,hn,g,E,nn,on,b,T,wn,ln,U,_n,cn,H,sn,vn,an,tn,bn,O,B,un,D,N,rn,I,$,J,Rn,K,Q,xn,V,M,Pn,q,W,kn,L,j,En,fn,A,X,Un,Y,z,$n,F,dn=`<code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinHeap</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> _heap<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        _heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        _heap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currentIndex <span class="token operator">=</span> _heap<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> parentIndex <span class="token operator">=</span> <span class="token function">GetParentIndex</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>parentIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> _heap<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">Swap</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentIndex <span class="token operator">=</span> parentIndex<span class="token punctuation">;</span>
            parentIndex <span class="token operator">=</span> <span class="token function">GetParentIndex</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetParentIndex</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ExtractMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_heap<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Heap is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name"><span class="token keyword">int</span></span> min <span class="token operator">=</span> _heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _heap<span class="token punctuation">[</span>_heap<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>_heap<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Heapify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Heapify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> smallest <span class="token operator">=</span> index<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> _heap<span class="token punctuation">.</span>Count <span class="token operator">&amp;&amp;</span> _heap<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            smallest <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> _heap<span class="token punctuation">.</span>Count <span class="token operator">&amp;&amp;</span> _heap<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            smallest <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>smallest <span class="token operator">!=</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">Swap</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> smallest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Heapify</span><span class="token punctuation">(</span>smallest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> parentIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> _heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> _heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>&#96;&#96;&#96;</code>`;return{c(){l=e("h1"),w=d("Heap"),f=r(),u=e("p"),y=d("A heap is a complete binary tree where the any given node is smaller/bigger than it\u2019s descendents depending if it\u2019s a min/max heap"),v=r(),_=e("h3"),hn=d("Heap represented as array"),g=r(),E=e("p"),nn=d("A heap can easily be represented as an array:"),on=r(),b=e("ul"),T=e("li"),wn=d("add in array level by level"),ln=r(),U=e("li"),_n=d("if a given node is at index i to find the parent of a node: p = (i - 1) / 2 (floor value of i/2)"),cn=r(),H=e("li"),sn=d("left chlid = 2 * i + 1"),vn=r(),an=e("li"),tn=d("right child = 2 * i + 2"),bn=r(),O=e("li"),B=d("all leaf nodes are in the last half of the array"),un=r(),D=e("h3"),N=d("Insert a value in the heap"),rn=r(),I=e("ul"),$=e("li"),J=d("add element at the end of array"),Rn=r(),K=e("li"),Q=d("compare with parent and swap if it\u2019s smaller/bigger"),xn=r(),V=e("li"),M=d("repeat for all parents of that node"),Pn=r(),q=e("h3"),W=d("Extract min/max value from heap"),kn=r(),L=e("ul"),j=e("li"),En=d("get value from root"),fn=r(),A=e("li"),X=d("bring the right-most leaf(last element of array) in the root"),Un=r(),Y=e("li"),z=d("push the element down by comparing with it\u2019s children and swapping if neccesary (or [[Heapify]])"),$n=r(),F=e("pre"),this.h()},l(t){l=o(t,"H1",{});var h=c(l);w=m(h,"Heap"),h.forEach(s),f=k(t),u=o(t,"P",{});var pn=c(u);y=m(pn,"A heap is a complete binary tree where the any given node is smaller/bigger than it\u2019s descendents depending if it\u2019s a min/max heap"),pn.forEach(s),v=k(t),_=o(t,"H3",{});var jn=c(_);hn=m(jn,"Heap represented as array"),jn.forEach(s),g=k(t),E=o(t,"P",{});var In=c(E);nn=m(In,"A heap can easily be represented as an array:"),In.forEach(s),on=k(t),b=o(t,"UL",{});var x=c(b);T=o(x,"LI",{});var Mn=c(T);wn=m(Mn,"add in array level by level"),Mn.forEach(s),ln=k(x),U=o(x,"LI",{});var Ln=c(U);_n=m(Ln,"if a given node is at index i to find the parent of a node: p = (i - 1) / 2 (floor value of i/2)"),Ln.forEach(s),cn=k(x),H=o(x,"LI",{});var en=c(H);sn=m(en,"left chlid = 2 * i + 1"),en.forEach(s),vn=k(x),an=o(x,"LI",{});var An=c(an);tn=m(An,"right child = 2 * i + 2"),An.forEach(s),bn=k(x),O=o(x,"LI",{});var Hn=c(O);B=m(Hn,"all leaf nodes are in the last half of the array"),Hn.forEach(s),x.forEach(s),un=k(t),D=o(t,"H3",{});var G=c(D);N=m(G,"Insert a value in the heap"),G.forEach(s),rn=k(t),I=o(t,"UL",{});var S=c(I);$=o(S,"LI",{});var Z=c($);J=m(Z,"add element at the end of array"),Z.forEach(s),Rn=k(S),K=o(S,"LI",{});var Fn=c(K);Q=m(Fn,"compare with parent and swap if it\u2019s smaller/bigger"),Fn.forEach(s),xn=k(S),V=o(S,"LI",{});var Sn=c(V);M=m(Sn,"repeat for all parents of that node"),Sn.forEach(s),S.forEach(s),Pn=k(t),q=o(t,"H3",{});var mn=c(q);W=m(mn,"Extract min/max value from heap"),mn.forEach(s),kn=k(t),L=o(t,"UL",{});var R=c(L);j=o(R,"LI",{});var Cn=c(j);En=m(Cn,"get value from root"),Cn.forEach(s),fn=k(R),A=o(R,"LI",{});var n=c(A);X=m(n,"bring the right-most leaf(last element of array) in the root"),n.forEach(s),Un=k(R),Y=o(R,"LI",{});var i=c(Y);z=m(i,"push the element down by comparing with it\u2019s children and swapping if neccesary (or [[Heapify]])"),i.forEach(s),R.forEach(s),$n=k(t),F=o(t,"PRE",{class:!0});var qn=c(F);qn.forEach(s),this.h()},h(){C(F,"class","language-cs")},m(t,h){p(t,l,h),a(l,w),p(t,f,h),p(t,u,h),a(u,y),p(t,v,h),p(t,_,h),a(_,hn),p(t,g,h),p(t,E,h),a(E,nn),p(t,on,h),p(t,b,h),a(b,T),a(T,wn),a(b,ln),a(b,U),a(U,_n),a(b,cn),a(b,H),a(H,sn),a(b,vn),a(b,an),a(an,tn),a(b,bn),a(b,O),a(O,B),p(t,un,h),p(t,D,h),a(D,N),p(t,rn,h),p(t,I,h),a(I,$),a($,J),a(I,Rn),a(I,K),a(K,Q),a(I,xn),a(I,V),a(V,M),p(t,Pn,h),p(t,q,h),a(q,W),p(t,kn,h),p(t,L,h),a(L,j),a(j,En),a(L,fn),a(L,A),a(A,X),a(L,Un),a(L,Y),a(Y,z),p(t,$n,h),p(t,F,h),F.innerHTML=dn},p:Tn,i:Tn,o:Tn,d(t){t&&s(l),t&&s(f),t&&s(u),t&&s(v),t&&s(_),t&&s(g),t&&s(E),t&&s(on),t&&s(b),t&&s(un),t&&s(D),t&&s(rn),t&&s(I),t&&s(Pn),t&&s(q),t&&s(kn),t&&s(L),t&&s($n),t&&s(F)}}}class Rs extends Bn{constructor(l){super();Nn(this,l,null,Hs,Jn,{})}}function _s(P){let l,w;return l=new Ls({}),{c(){fs(l.$$.fragment)},l(f){ds(l.$$.fragment,f)},m(f,u){ms(l,f,u),w=!0},i(f){w||(yn(l.$$.fragment,f),w=!0)},o(f){Dn(l.$$.fragment,f),w=!1},d(f){ys(l,f)}}}function vs(P){let l,w;return l=new Rs({}),{c(){fs(l.$$.fragment)},l(f){ds(l.$$.fragment,f)},m(f,u){ms(l,f,u),w=!0},i(f){w||(yn(l.$$.fragment,f),w=!0)},o(f){Dn(l.$$.fragment,f),w=!1},d(f){ys(l,f)}}}function Ps(P){let l,w,f,u=P[0]=="disjoint-sets"&&_s(),y=P[0]=="heap"&&vs();return{c(){l=e("section"),u&&u.c(),w=r(),y&&y.c()},l(v){l=o(v,"SECTION",{});var _=c(l);u&&u.l(_),w=k(_),y&&y.l(_),_.forEach(s)},m(v,_){p(v,l,_),u&&u.m(l,null),a(l,w),y&&y.m(l,null),f=!0},p(v,[_]){v[0]=="disjoint-sets"?u?_&1&&yn(u,1):(u=_s(),u.c(),yn(u,1),u.m(l,w)):u&&(ws(),Dn(u,1,1,()=>{u=null}),hs()),v[0]=="heap"?y?_&1&&yn(y,1):(y=vs(),y.c(),yn(y,1),y.m(l,null)):y&&(ws(),Dn(y,1,1,()=>{y=null}),hs())},i(v){f||(yn(u),yn(y),f=!0)},o(v){Dn(u),Dn(y),f=!1},d(v){v&&s(l),u&&u.d(),y&&y.d()}}}function js({params:P}){const{slug:l}=P;return{props:{slug:l}}}function Us(P,l,w){let{slug:f}=l;return P.$$set=u=>{"slug"in u&&w(0,f=u.slug)},[f]}class As extends Bn{constructor(l){super();Nn(this,l,Us,Ps,Jn,{slug:0})}}export{As as default,js as load};
