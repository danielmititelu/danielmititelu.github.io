import{S as yn,i as vn,s as _n,e as p,t as i,k as u,c as e,a as o,h as k,d as s,m as r,b as v,g as c,H as a,I as $}from"../../chunks/vendor-0a633d05.js";function En(hn){let m,T,j,_,G,I,E,M,V,d,D,H,W,z,L,P,K,q,x,Q,O,h,fn=`<code class="language-cs"><span class="token keyword">private</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span>
    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> source
    <span class="token comment">/*, int target*/</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PriorityQueue<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> distances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// initialize every node with infinity</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> node <span class="token keyword">in</span> graph<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>
        distances<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>

    <span class="token comment">// the distance from source node to itself is always 0</span>
    distances<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    minHeap<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// get the node with the minimum distance</span>
        <span class="token comment">// from the previous visited node</span>
        <span class="token keyword">var</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">,</span> curDist<span class="token punctuation">)</span> <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// if we need a target node</span>
        <span class="token comment">// if(node == target) return curDist;</span>

        <span class="token comment">// relax the edges of the current node,</span>
        <span class="token comment">// update the distances of all the adjacent nodes</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> nextWeight<span class="token punctuation">)</span> <span class="token keyword">in</span> graph<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> nextDist <span class="token operator">=</span> curDist <span class="token operator">+</span> nextWeight<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextDist <span class="token operator">&lt;</span> distances<span class="token punctuation">[</span>nextNode<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                distances<span class="token punctuation">[</span>nextNode<span class="token punctuation">]</span> <span class="token operator">=</span> nextDist<span class="token punctuation">;</span>
                minHeap<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> nextDist<span class="token punctuation">)</span><span class="token punctuation">,</span> nextDist<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// return the shortest distance</span>
    <span class="token comment">// from source node to all other nodes</span>
    <span class="token keyword">return</span> distances<span class="token punctuation">;</span>

    <span class="token comment">// if we need a target node</span>
    <span class="token comment">// return -1;</span>
<span class="token punctuation">&#125;</span></code>`,U,b,B,C,l,N,f,F,J,A,w,X,Y,S,y,Z;return{c(){m=p("h1"),T=i("Dijkstra Algorithm"),j=u(),_=p("p"),G=i("Greedy algorithm used to find the shortest path in a weighted graph."),I=u(),E=p("p"),M=i("Undirected Single source shortest paths with positive integer weights in linear time"),V=u(),d=p("ul"),D=p("li"),H=p("p"),W=i("Time complexity: O(V + Elog(E))"),z=u(),L=p("li"),P=p("p"),K=i("Space complexity: O(V + E)"),q=u(),x=p("p"),Q=i("Restrictions: only for non-decreasing weights (all weights >= 0)"),O=u(),h=p("pre"),U=u(),b=p("h2"),B=i("Problems"),C=u(),l=p("ul"),N=p("li"),f=p("a"),F=i("https://leetcode.com/problems/network-delay-time/"),J=u(),A=p("li"),w=p("a"),X=i("https://leetcode.com/problems/path-with-maximum-probability/"),Y=u(),S=p("li"),y=p("a"),Z=i("https://leetcode.com/problems/cheapest-flights-within-k-stops/"),this.h()},l(n){m=e(n,"H1",{});var t=o(m);T=k(t,"Dijkstra Algorithm"),t.forEach(s),j=r(n),_=e(n,"P",{});var nn=o(_);G=k(nn,"Greedy algorithm used to find the shortest path in a weighted graph."),nn.forEach(s),I=r(n),E=e(n,"P",{});var sn=o(E);M=k(sn,"Undirected Single source shortest paths with positive integer weights in linear time"),sn.forEach(s),V=r(n),d=e(n,"UL",{});var R=o(d);D=e(R,"LI",{});var an=o(D);H=e(an,"P",{});var tn=o(H);W=k(tn,"Time complexity: O(V + Elog(E))"),tn.forEach(s),an.forEach(s),z=r(R),L=e(R,"LI",{});var pn=o(L);P=e(pn,"P",{});var en=o(P);K=k(en,"Space complexity: O(V + E)"),en.forEach(s),pn.forEach(s),R.forEach(s),q=r(n),x=e(n,"P",{});var on=o(x);Q=k(on,"Restrictions: only for non-decreasing weights (all weights >= 0)"),on.forEach(s),O=r(n),h=e(n,"PRE",{class:!0});var wn=o(h);wn.forEach(s),U=r(n),b=e(n,"H2",{});var cn=o(b);B=k(cn,"Problems"),cn.forEach(s),C=r(n),l=e(n,"UL",{});var g=o(l);N=e(g,"LI",{});var ln=o(N);f=e(ln,"A",{href:!0,rel:!0});var un=o(f);F=k(un,"https://leetcode.com/problems/network-delay-time/"),un.forEach(s),ln.forEach(s),J=r(g),A=e(g,"LI",{});var kn=o(A);w=e(kn,"A",{href:!0,rel:!0});var rn=o(w);X=k(rn,"https://leetcode.com/problems/path-with-maximum-probability/"),rn.forEach(s),kn.forEach(s),Y=r(g),S=e(g,"LI",{});var mn=o(S);y=e(mn,"A",{href:!0,rel:!0});var dn=o(y);Z=k(dn,"https://leetcode.com/problems/cheapest-flights-within-k-stops/"),dn.forEach(s),mn.forEach(s),g.forEach(s),this.h()},h(){v(h,"class","language-cs"),v(f,"href","https://leetcode.com/problems/network-delay-time/"),v(f,"rel","nofollow"),v(w,"href","https://leetcode.com/problems/path-with-maximum-probability/"),v(w,"rel","nofollow"),v(y,"href","https://leetcode.com/problems/cheapest-flights-within-k-stops/"),v(y,"rel","nofollow")},m(n,t){c(n,m,t),a(m,T),c(n,j,t),c(n,_,t),a(_,G),c(n,I,t),c(n,E,t),a(E,M),c(n,V,t),c(n,d,t),a(d,D),a(D,H),a(H,W),a(d,z),a(d,L),a(L,P),a(P,K),c(n,q,t),c(n,x,t),a(x,Q),c(n,O,t),c(n,h,t),h.innerHTML=fn,c(n,U,t),c(n,b,t),a(b,B),c(n,C,t),c(n,l,t),a(l,N),a(N,f),a(f,F),a(l,J),a(l,A),a(A,w),a(w,X),a(l,Y),a(l,S),a(S,y),a(y,Z)},p:$,i:$,o:$,d(n){n&&s(m),n&&s(j),n&&s(_),n&&s(I),n&&s(E),n&&s(V),n&&s(d),n&&s(q),n&&s(x),n&&s(O),n&&s(h),n&&s(U),n&&s(b),n&&s(C),n&&s(l)}}}const bn={title:"Dijkstra's Algorithm",tags:["algorithm"]};class gn extends yn{constructor(m){super();vn(this,m,null,En,_n,{})}}export{gn as default,bn as metadata};
