import{S as hs,i as ys,s as ws,e as p,t as u,k as c,c as e,a as o,h as k,d as n,m as l,b as Z,g as t,H as i,n as $}from"../../chunks/index-337353e1.js";function _s(us){let r,W,P,v,Q,H,h,U,q,y,j,C,w,F,z,V,f,ks=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span>Node<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// visit node</span>
		node<span class="token punctuation">.</span>Visited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> child of node<span class="token punctuation">.</span>Children<span class="token punctuation">)</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>Visited<span class="token punctuation">)</span>
				stack<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,B,_,A,L,E,J,N,b,K,R,S,O,G,x,X,I,d,rs=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
		<span class="token keyword">return</span><span class="token punctuation">;</span>
		
	<span class="token comment">// visit node</span>
	node<span class="token punctuation">.</span>Visited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> child <span class="token keyword">in</span> node<span class="token punctuation">.</span>Children<span class="token punctuation">)</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>Visited<span class="token punctuation">)</span>
			<span class="token function">DFS</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
</code>`,M,D,Y,T,m,fs=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span>Node<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span> node <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
	<span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// visit node</span>
		node<span class="token punctuation">.</span>Visited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> child of node<span class="token punctuation">.</span>Children<span class="token punctuation">)</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>Visited<span class="token punctuation">)</span>
				stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=p("h1"),W=u("Graph traversals"),P=c(),v=p("h2"),Q=u("Breadth-first search"),H=c(),h=p("p"),U=u("We scan through the graph level by level starting with the nodes closest to the starting node."),q=c(),y=p("h4"),j=u("Examples:"),C=c(),w=p("ul"),F=p("li"),z=u("BFS can only be implemented in iterative manner:"),V=c(),f=p("pre"),B=c(),_=p("h2"),A=u("Depth-first search"),L=c(),E=p("p"),J=u("DFS for short is going to search a graph or matrix by depth first meaning it will pick a direction and go in that direction before coming back to visit other directions"),N=c(),b=p("p"),K=u("DFS can be implemented either recursively or iterative"),R=c(),S=p("h4"),O=u("Examples:"),G=c(),x=p("p"),X=u("Recursive implementation:"),I=c(),d=p("pre"),M=c(),D=p("p"),Y=u("Iterative implementation:"),T=c(),m=p("pre"),this.h()},l(s){r=e(s,"H1",{});var a=o(r);W=k(a,"Graph traversals"),a.forEach(n),P=l(s),v=e(s,"H2",{});var g=o(v);Q=k(g,"Breadth-first search"),g.forEach(n),H=l(s),h=e(s,"P",{});var ss=o(h);U=k(ss,"We scan through the graph level by level starting with the nodes closest to the starting node."),ss.forEach(n),q=l(s),y=e(s,"H4",{});var ns=o(y);j=k(ns,"Examples:"),ns.forEach(n),C=l(s),w=e(s,"UL",{});var as=o(w);F=e(as,"LI",{});var ts=o(F);z=k(ts,"BFS can only be implemented in iterative manner:"),ts.forEach(n),as.forEach(n),V=l(s),f=e(s,"PRE",{class:!0});var ds=o(f);ds.forEach(n),B=l(s),_=e(s,"H2",{});var ps=o(_);A=k(ps,"Depth-first search"),ps.forEach(n),L=l(s),E=e(s,"P",{});var es=o(E);J=k(es,"DFS for short is going to search a graph or matrix by depth first meaning it will pick a direction and go in that direction before coming back to visit other directions"),es.forEach(n),N=l(s),b=e(s,"P",{});var os=o(b);K=k(os,"DFS can be implemented either recursively or iterative"),os.forEach(n),R=l(s),S=e(s,"H4",{});var cs=o(S);O=k(cs,"Examples:"),cs.forEach(n),G=l(s),x=e(s,"P",{});var ls=o(x);X=k(ls,"Recursive implementation:"),ls.forEach(n),I=l(s),d=e(s,"PRE",{class:!0});var ms=o(d);ms.forEach(n),M=l(s),D=e(s,"P",{});var is=o(D);Y=k(is,"Iterative implementation:"),is.forEach(n),T=l(s),m=e(s,"PRE",{class:!0});var vs=o(m);vs.forEach(n),this.h()},h(){Z(f,"class","language-cs"),Z(d,"class","language-cs"),Z(m,"class","language-cs")},m(s,a){t(s,r,a),i(r,W),t(s,P,a),t(s,v,a),i(v,Q),t(s,H,a),t(s,h,a),i(h,U),t(s,q,a),t(s,y,a),i(y,j),t(s,C,a),t(s,w,a),i(w,F),i(F,z),t(s,V,a),t(s,f,a),f.innerHTML=ks,t(s,B,a),t(s,_,a),i(_,A),t(s,L,a),t(s,E,a),i(E,J),t(s,N,a),t(s,b,a),i(b,K),t(s,R,a),t(s,S,a),i(S,O),t(s,G,a),t(s,x,a),i(x,X),t(s,I,a),t(s,d,a),d.innerHTML=rs,t(s,M,a),t(s,D,a),i(D,Y),t(s,T,a),t(s,m,a),m.innerHTML=fs},p:$,i:$,o:$,d(s){s&&n(r),s&&n(P),s&&n(v),s&&n(H),s&&n(h),s&&n(q),s&&n(y),s&&n(C),s&&n(w),s&&n(V),s&&n(f),s&&n(B),s&&n(_),s&&n(L),s&&n(E),s&&n(N),s&&n(b),s&&n(R),s&&n(S),s&&n(G),s&&n(x),s&&n(I),s&&n(d),s&&n(M),s&&n(D),s&&n(T),s&&n(m)}}}const bs={title:"Graph traversals",tags:["algorithm"]};class Ss extends hs{constructor(r){super(),ys(this,r,null,_s,ws,{})}}export{Ss as default,bs as metadata};
