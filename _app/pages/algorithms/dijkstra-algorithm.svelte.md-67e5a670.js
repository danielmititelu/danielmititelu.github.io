import{S as dn,i as hn,s as fn,e as t,t as i,k as u,c as p,a as e,h as k,d as s,m as r,b as v,g as c,F as a,G as X}from"../../chunks/vendor-cac58433.js";function wn(kn){let m,G,j,_,R,I,d,D,g,T,M,H,L,U,S,E,W,V,h,rn=`<code class="language-cs"><span class="token keyword">private</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span>
    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> source
    <span class="token comment">/*, int target*/</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PriorityQueue<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> distances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// initialize every node with infinity</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> node <span class="token keyword">in</span> graph<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>
        distances<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>

    <span class="token comment">// the distance from source node to itself is always 0</span>
    distances<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    minHeap<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// get the node with the minimum distance</span>
        <span class="token comment">// from the previous visited node</span>
        <span class="token keyword">var</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">,</span> curDist<span class="token punctuation">)</span> <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// if we need a target node</span>
        <span class="token comment">// if(node == target) return curDist;</span>

        <span class="token comment">// relax the edges of the current node,</span>
        <span class="token comment">// update the distances of all the adjacent nodes</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> nextWeight<span class="token punctuation">)</span> <span class="token keyword">in</span> graph<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> nextDist <span class="token operator">=</span> curDist <span class="token operator">+</span> nextWeight<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextDist <span class="token operator">&lt;</span> distances<span class="token punctuation">[</span>nextNode<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                distances<span class="token punctuation">[</span>nextNode<span class="token punctuation">]</span> <span class="token operator">=</span> nextDist<span class="token punctuation">;</span>
                minHeap<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> nextDist<span class="token punctuation">)</span><span class="token punctuation">,</span> nextDist<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// return the shortest distance</span>
    <span class="token comment">// from source node to all other nodes</span>
    <span class="token keyword">return</span> distances<span class="token punctuation">;</span>

    <span class="token comment">// if we need a target node</span>
    <span class="token comment">// return -1;</span>
<span class="token punctuation">&#125;</span></code>`,q,x,z,O,l,N,f,F,K,P,w,Q,B,A,y,J;return{c(){m=t("h1"),G=i("Dijkstra Algorithm"),j=u(),_=t("p"),R=i("Greedy alghorithm used to find the shortest path in a weighted graph."),I=u(),d=t("ul"),D=t("li"),g=t("p"),T=i("Time complexity: O(V + Elog(E))"),M=u(),H=t("li"),L=t("p"),U=i("Space complexity: O(V + E)"),S=u(),E=t("p"),W=i("Restrictions: only for non-decreasing weights (all weights >= 0)"),V=u(),h=t("pre"),q=u(),x=t("h2"),z=i("Problems"),O=u(),l=t("ul"),N=t("li"),f=t("a"),F=i("https://leetcode.com/problems/network-delay-time/"),K=u(),P=t("li"),w=t("a"),Q=i("https://leetcode.com/problems/path-with-maximum-probability/"),B=u(),A=t("li"),y=t("a"),J=i("https://leetcode.com/problems/cheapest-flights-within-k-stops/"),this.h()},l(n){m=p(n,"H1",{});var o=e(m);G=k(o,"Dijkstra Algorithm"),o.forEach(s),j=r(n),_=p(n,"P",{});var Y=e(_);R=k(Y,"Greedy alghorithm used to find the shortest path in a weighted graph."),Y.forEach(s),I=r(n),d=p(n,"UL",{});var C=e(d);D=p(C,"LI",{});var Z=e(D);g=p(Z,"P",{});var $=e(g);T=k($,"Time complexity: O(V + Elog(E))"),$.forEach(s),Z.forEach(s),M=r(C),H=p(C,"LI",{});var nn=e(H);L=p(nn,"P",{});var sn=e(L);U=k(sn,"Space complexity: O(V + E)"),sn.forEach(s),nn.forEach(s),C.forEach(s),S=r(n),E=p(n,"P",{});var an=e(E);W=k(an,"Restrictions: only for non-decreasing weights (all weights >= 0)"),an.forEach(s),V=r(n),h=p(n,"PRE",{class:!0});var mn=e(h);mn.forEach(s),q=r(n),x=p(n,"H2",{});var tn=e(x);z=k(tn,"Problems"),tn.forEach(s),O=r(n),l=p(n,"UL",{});var b=e(l);N=p(b,"LI",{});var pn=e(N);f=p(pn,"A",{href:!0,rel:!0});var en=e(f);F=k(en,"https://leetcode.com/problems/network-delay-time/"),en.forEach(s),pn.forEach(s),K=r(b),P=p(b,"LI",{});var on=e(P);w=p(on,"A",{href:!0,rel:!0});var cn=e(w);Q=k(cn,"https://leetcode.com/problems/path-with-maximum-probability/"),cn.forEach(s),on.forEach(s),B=r(b),A=p(b,"LI",{});var ln=e(A);y=p(ln,"A",{href:!0,rel:!0});var un=e(y);J=k(un,"https://leetcode.com/problems/cheapest-flights-within-k-stops/"),un.forEach(s),ln.forEach(s),b.forEach(s),this.h()},h(){v(h,"class","language-cs"),v(f,"href","https://leetcode.com/problems/network-delay-time/"),v(f,"rel","nofollow"),v(w,"href","https://leetcode.com/problems/path-with-maximum-probability/"),v(w,"rel","nofollow"),v(y,"href","https://leetcode.com/problems/cheapest-flights-within-k-stops/"),v(y,"rel","nofollow")},m(n,o){c(n,m,o),a(m,G),c(n,j,o),c(n,_,o),a(_,R),c(n,I,o),c(n,d,o),a(d,D),a(D,g),a(g,T),a(d,M),a(d,H),a(H,L),a(L,U),c(n,S,o),c(n,E,o),a(E,W),c(n,V,o),c(n,h,o),h.innerHTML=rn,c(n,q,o),c(n,x,o),a(x,z),c(n,O,o),c(n,l,o),a(l,N),a(N,f),a(f,F),a(l,K),a(l,P),a(P,w),a(w,Q),a(l,B),a(l,A),a(A,y),a(y,J)},p:X,i:X,o:X,d(n){n&&s(m),n&&s(j),n&&s(_),n&&s(I),n&&s(d),n&&s(S),n&&s(E),n&&s(V),n&&s(h),n&&s(q),n&&s(x),n&&s(O),n&&s(l)}}}const vn={title:"Dijkstra Algorithm"};class _n extends dn{constructor(m){super();hn(this,m,null,wn,fn,{})}}export{_n as default,vn as metadata};
