import{S as nn,i as an,s as tn,e as p,t as k,k as c,c as o,a as e,h as i,d as n,m as l,P as Es,b as r,g as t,F as u,G as Is}from"../../chunks/vendor-00649aba.js";function pn(Ds){let f,cs,h,P,ls,j,E,I,Ts,z,T,us,D,L,ks,J,d,Js=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Preorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

	result<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,K,b,is,Q,v,Ks=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span>TreeNode<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		res<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
			stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
			stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,U,H,rs,V,N,fs,W,R,M,Ls,X,x,ds,Y,O,vs,Z,w,Qs=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">InorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Helper</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

	<span class="token function">Helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	result<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,$,A,ws,g,y,Us=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">InorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span>TreeNode<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> visit <span class="token operator">=</span> root<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>visit <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>visit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
			visit <span class="token operator">=</span> visit<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> next <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		result<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		visit <span class="token operator">=</span> next<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ss,S,ys,ns,B,C,bs,as,G,ms,ts,q,_s,ps,m,Vs=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Postorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">Postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	result<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,os,F,Ps,es,_,Ws=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>
	
	<span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span>TreeNode<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		result<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
			stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
			stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("h1"),cs=k("Binary tree traversals"),h=c(),P=p("h2"),ls=k("Preorder traversal"),j=c(),E=p("p"),I=p("img"),z=c(),T=p("p"),us=k("Order of visiting: parent -> left child -> right child"),D=c(),L=p("p"),ks=k("Recursive implementation:"),J=c(),d=p("pre"),K=c(),b=p("p"),is=k("Iterative implementation:"),Q=c(),v=p("pre"),U=c(),H=p("h2"),rs=k("Inorder traversal"),V=c(),N=p("p"),fs=k("It\u2019s called inorder since for a binary search tree it traverse the nodes in ascending order."),W=c(),R=p("p"),M=p("img"),X=c(),x=p("p"),ds=k("Order of visiting: left child -> parent -> right child"),Y=c(),O=p("p"),vs=k("Recursive inorder traversal:"),Z=c(),w=p("pre"),$=c(),A=p("p"),ws=k("Iterative inorder traversal"),g=c(),y=p("pre"),ss=c(),S=p("h2"),ys=k("Postorder traversal"),ns=c(),B=p("p"),C=p("img"),as=c(),G=p("p"),ms=k("Order of visiting: left child -> right child -> parent"),ts=c(),q=p("p"),_s=k("Recursive implementation:"),ps=c(),m=p("pre"),os=c(),F=p("p"),Ps=k("Iterative implementation:"),es=c(),_=p("pre"),this.h()},l(s){f=o(s,"H1",{});var a=e(f);cs=i(a,"Binary tree traversals"),a.forEach(n),h=l(s),P=o(s,"H2",{});var Hs=e(P);ls=i(Hs,"Preorder traversal"),Hs.forEach(n),j=l(s),E=o(s,"P",{});var Ns=e(E);I=o(Ns,"IMG",{src:!0,alt:!0}),Ns.forEach(n),z=l(s),T=o(s,"P",{});var Rs=e(T);us=i(Rs,"Order of visiting: parent -> left child -> right child"),Rs.forEach(n),D=l(s),L=o(s,"P",{});var Ms=e(L);ks=i(Ms,"Recursive implementation:"),Ms.forEach(n),J=l(s),d=o(s,"PRE",{class:!0});var Xs=e(d);Xs.forEach(n),K=l(s),b=o(s,"P",{});var xs=e(b);is=i(xs,"Iterative implementation:"),xs.forEach(n),Q=l(s),v=o(s,"PRE",{class:!0});var Ys=e(v);Ys.forEach(n),U=l(s),H=o(s,"H2",{});var Os=e(H);rs=i(Os,"Inorder traversal"),Os.forEach(n),V=l(s),N=o(s,"P",{});var As=e(N);fs=i(As,"It\u2019s called inorder since for a binary search tree it traverse the nodes in ascending order."),As.forEach(n),W=l(s),R=o(s,"P",{});var Ss=e(R);M=o(Ss,"IMG",{src:!0,alt:!0}),Ss.forEach(n),X=l(s),x=o(s,"P",{});var Bs=e(x);ds=i(Bs,"Order of visiting: left child -> parent -> right child"),Bs.forEach(n),Y=l(s),O=o(s,"P",{});var Cs=e(O);vs=i(Cs,"Recursive inorder traversal:"),Cs.forEach(n),Z=l(s),w=o(s,"PRE",{class:!0});var Zs=e(w);Zs.forEach(n),$=l(s),A=o(s,"P",{});var Gs=e(A);ws=i(Gs,"Iterative inorder traversal"),Gs.forEach(n),g=l(s),y=o(s,"PRE",{class:!0});var $s=e(y);$s.forEach(n),ss=l(s),S=o(s,"H2",{});var qs=e(S);ys=i(qs,"Postorder traversal"),qs.forEach(n),ns=l(s),B=o(s,"P",{});var Fs=e(B);C=o(Fs,"IMG",{src:!0,alt:!0}),Fs.forEach(n),as=l(s),G=o(s,"P",{});var hs=e(G);ms=i(hs,"Order of visiting: left child -> right child -> parent"),hs.forEach(n),ts=l(s),q=o(s,"P",{});var js=e(q);_s=i(js,"Recursive implementation:"),js.forEach(n),ps=l(s),m=o(s,"PRE",{class:!0});var gs=e(m);gs.forEach(n),os=l(s),F=o(s,"P",{});var zs=e(F);Ps=i(zs,"Iterative implementation:"),zs.forEach(n),es=l(s),_=o(s,"PRE",{class:!0});var sn=e(_);sn.forEach(n),this.h()},h(){Es(I.src,Ts="/preorder.svg")||r(I,"src",Ts),r(I,"alt","image"),r(d,"class","language-cs"),r(v,"class","language-cs"),Es(M.src,Ls="/inorder.svg")||r(M,"src",Ls),r(M,"alt","image"),r(w,"class","language-cs"),r(y,"class","language-cs"),Es(C.src,bs="/postorder.svg")||r(C,"src",bs),r(C,"alt","image"),r(m,"class","language-cs"),r(_,"class","language-cs")},m(s,a){t(s,f,a),u(f,cs),t(s,h,a),t(s,P,a),u(P,ls),t(s,j,a),t(s,E,a),u(E,I),t(s,z,a),t(s,T,a),u(T,us),t(s,D,a),t(s,L,a),u(L,ks),t(s,J,a),t(s,d,a),d.innerHTML=Js,t(s,K,a),t(s,b,a),u(b,is),t(s,Q,a),t(s,v,a),v.innerHTML=Ks,t(s,U,a),t(s,H,a),u(H,rs),t(s,V,a),t(s,N,a),u(N,fs),t(s,W,a),t(s,R,a),u(R,M),t(s,X,a),t(s,x,a),u(x,ds),t(s,Y,a),t(s,O,a),u(O,vs),t(s,Z,a),t(s,w,a),w.innerHTML=Qs,t(s,$,a),t(s,A,a),u(A,ws),t(s,g,a),t(s,y,a),y.innerHTML=Us,t(s,ss,a),t(s,S,a),u(S,ys),t(s,ns,a),t(s,B,a),u(B,C),t(s,as,a),t(s,G,a),u(G,ms),t(s,ts,a),t(s,q,a),u(q,_s),t(s,ps,a),t(s,m,a),m.innerHTML=Vs,t(s,os,a),t(s,F,a),u(F,Ps),t(s,es,a),t(s,_,a),_.innerHTML=Ws},p:Is,i:Is,o:Is,d(s){s&&n(f),s&&n(h),s&&n(P),s&&n(j),s&&n(E),s&&n(z),s&&n(T),s&&n(D),s&&n(L),s&&n(J),s&&n(d),s&&n(K),s&&n(b),s&&n(Q),s&&n(v),s&&n(U),s&&n(H),s&&n(V),s&&n(N),s&&n(W),s&&n(R),s&&n(X),s&&n(x),s&&n(Y),s&&n(O),s&&n(Z),s&&n(w),s&&n($),s&&n(A),s&&n(g),s&&n(y),s&&n(ss),s&&n(S),s&&n(ns),s&&n(B),s&&n(as),s&&n(G),s&&n(ts),s&&n(q),s&&n(ps),s&&n(m),s&&n(os),s&&n(F),s&&n(es),s&&n(_)}}}const en={title:"Binary tree traversals",tags:["algorithm"]};class cn extends nn{constructor(f){super();an(this,f,null,pn,tn,{})}}export{cn as default,en as metadata};
