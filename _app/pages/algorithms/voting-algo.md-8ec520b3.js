import{S as L,i as z,s as D,e as l,t as y,k as h,c,a as i,h as d,d as a,m as _,b as H,g as t,H as f,n as O}from"../../chunks/index-337353e1.js";function F(R){let e,E,w,r,M,x,u,T,b,o,I=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MajorityElement</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> candidate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num <span class="token keyword">in</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			candidate <span class="token operator">=</span> num<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		count <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> candidate<span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> candidate<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,v,m,g,j,k,p,A;return{c(){e=l("h1"),E=y("Boyer-Moore Voting Algorithm"),w=h(),r=l("p"),M=y(`Time complexity : O(n)
Space complexity : O(1)`),x=h(),u=l("p"),T=y("The algorithm counts the majority of votes(elements) in an array by finding a part of the array (suffix) where the first element in array suffix is the majority. It does this by diregarding any prefix where the majority is equal to the minority of votes."),b=h(),o=l("pre"),v=h(),m=l("h3"),g=y("References"),j=h(),k=l("p"),p=l("a"),A=y("https://leetcode.com/problems/majority-element/solution/"),this.h()},l(s){e=c(s,"H1",{});var n=i(e);E=d(n,"Boyer-Moore Voting Algorithm"),n.forEach(a),w=_(s),r=c(s,"P",{});var P=i(r);M=d(P,`Time complexity : O(n)
Space complexity : O(1)`),P.forEach(a),x=_(s),u=c(s,"P",{});var S=i(u);T=d(S,"The algorithm counts the majority of votes(elements) in an array by finding a part of the array (suffix) where the first element in array suffix is the majority. It does this by diregarding any prefix where the majority is equal to the minority of votes."),S.forEach(a),b=_(s),o=c(s,"PRE",{class:!0});var C=i(o);C.forEach(a),v=_(s),m=c(s,"H3",{});var V=i(m);g=d(V,"References"),V.forEach(a),j=_(s),k=c(s,"P",{});var q=i(k);p=c(q,"A",{href:!0,rel:!0});var B=i(p);A=d(B,"https://leetcode.com/problems/majority-element/solution/"),B.forEach(a),q.forEach(a),this.h()},h(){H(o,"class","language-cs"),H(p,"href","https://leetcode.com/problems/majority-element/solution/"),H(p,"rel","nofollow")},m(s,n){t(s,e,n),f(e,E),t(s,w,n),t(s,r,n),f(r,M),t(s,x,n),t(s,u,n),f(u,T),t(s,b,n),t(s,o,n),o.innerHTML=I,t(s,v,n),t(s,m,n),f(m,g),t(s,j,n),t(s,k,n),f(k,p),f(p,A)},p:O,i:O,o:O,d(s){s&&a(e),s&&a(w),s&&a(r),s&&a(x),s&&a(u),s&&a(b),s&&a(o),s&&a(v),s&&a(m),s&&a(j),s&&a(k)}}}const J={title:"Boyer-Moore Voting Algorithm",tags:["algorithm"]};class K extends L{constructor(e){super(),z(this,e,null,F,D,{})}}export{K as default,J as metadata};
