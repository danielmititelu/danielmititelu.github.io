import{S as Fn,i as Rn,s as Gn,e as o,t as a,k as i,c as p,a as l,h as t,d as n,m as r,b as Kn,g as u,F as s,G as dn}from"../../chunks/vendor-00649aba.js";function Mn(qn){let E,ds,as,S,hs,ts,H,fs,es,y,T,ms,vs,A,ws,os,N,Es,ps,k,F,ys,_s,v,xs,R,Is,gs,G,Ls,Os,bs,h,Cs,K,Ds,Qs,M,Ss,Hs,I,j,Ns,Ps,f,Us,z,qs,Ts,B,As,Fs,d,g,Rs,J,Gs,Ks,Ms,m,js,V,zs,Bs,W,Js,Vs,X,Ws,Xs,L,Ys,Y,Zs,$s,sn,O,nn,Z,an,tn,en,P,on,w,$,pn,ln,ss,cn,rn,ns,un,ls,b,Tn=`<code class="language-cs"><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">FindKthLargest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> k<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> kthIndex <span class="token operator">=</span> nums<span class="token punctuation">.</span>Length <span class="token operator">-</span> k<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pivotIdx <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pivotIdx <span class="token operator">==</span> kthIndex<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pivotIdx <span class="token operator">&lt;</span> kthIndex<span class="token punctuation">)</span>
            left <span class="token operator">=</span> pivotIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            right <span class="token operator">=</span> pivotIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>kthIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> left<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> right<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> pivotIdx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pivotIdx<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> storeIndex <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">Swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> storeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storeIndex<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">Swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> storeIndex<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> storeIndex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pivot<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> right<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){E=o("h1"),ds=a("Quickselect"),as=i(),S=o("h4"),hs=a("Quick select or Hoare\u2019s selection algorithm"),ts=i(),H=o("p"),fs=a("Time complexity:"),es=i(),y=o("ul"),T=o("li"),ms=a("average case O(N)"),vs=i(),A=o("li"),ws=a("worst case O(N^2)"),os=i(),N=o("p"),Es=a("Algoritm steps:"),ps=i(),k=o("ul"),F=o("li"),ys=a("figure out k-th index(smallest: k, biggest: n - k)"),_s=i(),v=o("li"),xs=a("add 2 pointers ("),R=o("code"),Is=a("left"),gs=a(" and "),G=o("code"),Ls=a("right"),Os=a(") for the start and end of the array, similar to binary search"),bs=i(),h=o("li"),Cs=a("while "),K=o("code"),Ds=a("left"),Qs=a(" is smaller than "),M=o("code"),Ss=a("right"),Hs=a(" pick a random index as pivot and partition:"),I=o("ul"),j=o("li"),Ns=a("save the pivot in the right pointer"),Ps=i(),f=o("li"),Us=a("starting from left with 2 pointers: "),z=o("code"),qs=a("storeIndex"),Ts=a(" and "),B=o("code"),As=a("i"),Fs=a(":"),d=o("ul"),g=o("li"),Rs=a("move "),J=o("code"),Gs=a("i"),Ks=a(" forword untill it reaches the right pointer,"),Ms=i(),m=o("li"),js=a("every time "),V=o("code"),zs=a("i"),Bs=a(" finds a value smaller than the pivot, swap it with "),W=o("code"),Js=a("storeIndex"),Vs=a(" and increment "),X=o("code"),Ws=a("storeIndex"),Xs=i(),L=o("li"),Ys=a("at the end swap "),Y=o("code"),Zs=a("storeIndex"),$s=a(" with the pivot stored in right pointer"),sn=i(),O=o("li"),nn=a("return "),Z=o("code"),an=a("storeIndex"),tn=a(", this is our pivot in it\u2019s final ordered position"),en=i(),P=o("li"),on=a("similar to binary search compare pivot index with the k-th index:"),w=o("ul"),$=o("li"),pn=a("if they are equal then we found the k-th element"),ln=i(),ss=o("li"),cn=a("if pivot index is bigger, seach in the left part of the pivot where there are smaller values"),rn=i(),ns=o("li"),un=a("if pivot index is smaller, search in the right part"),ls=i(),b=o("pre"),this.h()},l(e){E=p(e,"H1",{});var c=l(E);ds=t(c,"Quickselect"),c.forEach(n),as=r(e),S=p(e,"H4",{});var hn=l(S);hs=t(hn,"Quick select or Hoare\u2019s selection algorithm"),hn.forEach(n),ts=r(e),H=p(e,"P",{});var fn=l(H);fs=t(fn,"Time complexity:"),fn.forEach(n),es=r(e),y=p(e,"UL",{});var cs=l(y);T=p(cs,"LI",{});var mn=l(T);ms=t(mn,"average case O(N)"),mn.forEach(n),vs=r(cs),A=p(cs,"LI",{});var vn=l(A);ws=t(vn,"worst case O(N^2)"),vn.forEach(n),cs.forEach(n),os=r(e),N=p(e,"P",{});var wn=l(N);Es=t(wn,"Algoritm steps:"),wn.forEach(n),ps=r(e),k=p(e,"UL",{});var _=l(k);F=p(_,"LI",{});var En=l(F);ys=t(En,"figure out k-th index(smallest: k, biggest: n - k)"),En.forEach(n),_s=r(_),v=p(_,"LI",{});var U=l(v);xs=t(U,"add 2 pointers ("),R=p(U,"CODE",{});var yn=l(R);Is=t(yn,"left"),yn.forEach(n),gs=t(U," and "),G=p(U,"CODE",{});var _n=l(G);Ls=t(_n,"right"),_n.forEach(n),Os=t(U,") for the start and end of the array, similar to binary search"),U.forEach(n),bs=r(_),h=p(_,"LI",{});var C=l(h);Cs=t(C,"while "),K=p(C,"CODE",{});var xn=l(K);Ds=t(xn,"left"),xn.forEach(n),Qs=t(C," is smaller than "),M=p(C,"CODE",{});var In=l(M);Ss=t(In,"right"),In.forEach(n),Hs=t(C," pick a random index as pivot and partition:"),I=p(C,"UL",{});var is=l(I);j=p(is,"LI",{});var gn=l(j);Ns=t(gn,"save the pivot in the right pointer"),gn.forEach(n),Ps=r(is),f=p(is,"LI",{});var D=l(f);Us=t(D,"starting from left with 2 pointers: "),z=p(D,"CODE",{});var Ln=l(z);qs=t(Ln,"storeIndex"),Ln.forEach(n),Ts=t(D," and "),B=p(D,"CODE",{});var On=l(B);As=t(On,"i"),On.forEach(n),Fs=t(D,":"),d=p(D,"UL",{});var x=l(d);g=p(x,"LI",{});var rs=l(g);Rs=t(rs,"move "),J=p(rs,"CODE",{});var bn=l(J);Gs=t(bn,"i"),bn.forEach(n),Ks=t(rs," forword untill it reaches the right pointer,"),rs.forEach(n),Ms=r(x),m=p(x,"LI",{});var Q=l(m);js=t(Q,"every time "),V=p(Q,"CODE",{});var Cn=l(V);zs=t(Cn,"i"),Cn.forEach(n),Bs=t(Q," finds a value smaller than the pivot, swap it with "),W=p(Q,"CODE",{});var Dn=l(W);Js=t(Dn,"storeIndex"),Dn.forEach(n),Vs=t(Q," and increment "),X=p(Q,"CODE",{});var Qn=l(X);Ws=t(Qn,"storeIndex"),Qn.forEach(n),Q.forEach(n),Xs=r(x),L=p(x,"LI",{});var us=l(L);Ys=t(us,"at the end swap "),Y=p(us,"CODE",{});var Sn=l(Y);Zs=t(Sn,"storeIndex"),Sn.forEach(n),$s=t(us," with the pivot stored in right pointer"),us.forEach(n),sn=r(x),O=p(x,"LI",{});var ks=l(O);nn=t(ks,"return "),Z=p(ks,"CODE",{});var Hn=l(Z);an=t(Hn,"storeIndex"),Hn.forEach(n),tn=t(ks,", this is our pivot in it\u2019s final ordered position"),ks.forEach(n),x.forEach(n),D.forEach(n),is.forEach(n),C.forEach(n),en=r(_),P=p(_,"LI",{});var kn=l(P);on=t(kn,"similar to binary search compare pivot index with the k-th index:"),w=p(kn,"UL",{});var q=l(w);$=p(q,"LI",{});var Nn=l($);pn=t(Nn,"if they are equal then we found the k-th element"),Nn.forEach(n),ln=r(q),ss=p(q,"LI",{});var Pn=l(ss);cn=t(Pn,"if pivot index is bigger, seach in the left part of the pivot where there are smaller values"),Pn.forEach(n),rn=r(q),ns=p(q,"LI",{});var Un=l(ns);un=t(Un,"if pivot index is smaller, search in the right part"),Un.forEach(n),q.forEach(n),kn.forEach(n),_.forEach(n),ls=r(e),b=p(e,"PRE",{class:!0});var An=l(b);An.forEach(n),this.h()},h(){Kn(b,"class","language-cs")},m(e,c){u(e,E,c),s(E,ds),u(e,as,c),u(e,S,c),s(S,hs),u(e,ts,c),u(e,H,c),s(H,fs),u(e,es,c),u(e,y,c),s(y,T),s(T,ms),s(y,vs),s(y,A),s(A,ws),u(e,os,c),u(e,N,c),s(N,Es),u(e,ps,c),u(e,k,c),s(k,F),s(F,ys),s(k,_s),s(k,v),s(v,xs),s(v,R),s(R,Is),s(v,gs),s(v,G),s(G,Ls),s(v,Os),s(k,bs),s(k,h),s(h,Cs),s(h,K),s(K,Ds),s(h,Qs),s(h,M),s(M,Ss),s(h,Hs),s(h,I),s(I,j),s(j,Ns),s(I,Ps),s(I,f),s(f,Us),s(f,z),s(z,qs),s(f,Ts),s(f,B),s(B,As),s(f,Fs),s(f,d),s(d,g),s(g,Rs),s(g,J),s(J,Gs),s(g,Ks),s(d,Ms),s(d,m),s(m,js),s(m,V),s(V,zs),s(m,Bs),s(m,W),s(W,Js),s(m,Vs),s(m,X),s(X,Ws),s(d,Xs),s(d,L),s(L,Ys),s(L,Y),s(Y,Zs),s(L,$s),s(d,sn),s(d,O),s(O,nn),s(O,Z),s(Z,an),s(O,tn),s(k,en),s(k,P),s(P,on),s(P,w),s(w,$),s($,pn),s(w,ln),s(w,ss),s(ss,cn),s(w,rn),s(w,ns),s(ns,un),u(e,ls,c),u(e,b,c),b.innerHTML=Tn},p:dn,i:dn,o:dn,d(e){e&&n(E),e&&n(as),e&&n(S),e&&n(ts),e&&n(H),e&&n(es),e&&n(y),e&&n(os),e&&n(N),e&&n(ps),e&&n(k),e&&n(ls),e&&n(b)}}}const zn={title:"Quickselect",tags:["algorithm"]};class Bn extends Fn{constructor(E){super();Rn(this,E,null,Mn,Gn,{})}}export{Bn as default,zn as metadata};
