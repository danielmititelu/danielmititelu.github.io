import{S as ln,i as kn,s as rn,e as t,t as k,k as u,c as o,a as e,h as i,d as s,m as l,b as B,g as p,F as c,G as J}from"../../chunks/vendor-cac58433.js";function dn(tn){let r,P,L,f,I,D,v,R,x,d,C,V,O,E,K,j,h,M,A,y,on=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">FindOrder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> numCourses<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> prerequisites<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> graph <span class="token operator">=</span> <span class="token function">BuildGraph</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> indegrees <span class="token operator">=</span> <span class="token function">CountIndegrees</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>indegrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
            queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> index <span class="token operator">=</span> numCourses <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> courseDone <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>courseDone<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// remove it from the graph</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> adj <span class="token keyword">in</span> graph<span class="token punctuation">[</span>courseDone<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            indegrees<span class="token punctuation">[</span>adj<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>indegrees<span class="token punctuation">[</span>adj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
                queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>adj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    ans<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token return-type class-name">numCourses <span class="token punctuation">?</span></span> 
        ans<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">CountIndegrees</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> indegrees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span>Count<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> course <span class="token keyword">in</span> graph<span class="token punctuation">)</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> adj <span class="token keyword">in</span> course<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
            indegrees<span class="token punctuation">[</span>adj<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            
    <span class="token keyword">return</span> indegrees<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">BuildGraph</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> numCourses<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> prerequisites<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prereq <span class="token keyword">in</span> prerequisites<span class="token punctuation">)</span>
        graph<span class="token punctuation">[</span>prereq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>prereq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> graph<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,S,b,U,T,w,en=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanFinish</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> numCourses<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> prerequisites<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> graph <span class="token operator">=</span> <span class="token function">BuildGraph</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">bool</span></span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> visiting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">bool</span></span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">HasCycle</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> i<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> visiting<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">HasCycle</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> visited<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> visiting<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>visiting<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

	visiting<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> j <span class="token keyword">in</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasCycle</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> j<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> visiting<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	visiting<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">BuildGraph</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> numCourses<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> prerequisites<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pre <span class="token keyword">in</span> prerequisites<span class="token punctuation">)</span>
		graph<span class="token punctuation">[</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token keyword">return</span> graph<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,F,_,Q,G,g,q,m,z;return{c(){r=t("h1"),P=k("Topological sort"),L=u(),f=t("p"),I=k("Time Complexity: O(V+E) // V = vertex (or node), E = edge"),D=u(),v=t("p"),R=k("Sort a graph so that any node on the left will point only to the nodes in the right"),x=u(),d=t("ul"),C=t("li"),V=k("cannot be done for graphs that have a cycle"),O=u(),E=t("li"),K=k("should be a DAG(directed acyclic graph)"),j=u(),h=t("p"),M=k("Khan\u2019s algorithm BFS"),A=u(),y=t("pre"),S=u(),b=t("p"),U=k("DFS"),T=u(),w=t("pre"),F=u(),_=t("h3"),Q=k("References"),G=u(),g=t("ul"),q=t("li"),m=t("a"),z=k("https://leetcode.com/problems/course-schedule/"),this.h()},l(n){r=o(n,"H1",{});var a=e(r);P=i(a,"Topological sort"),a.forEach(s),L=l(n),f=o(n,"P",{});var N=e(f);I=i(N,"Time Complexity: O(V+E) // V = vertex (or node), E = edge"),N.forEach(s),D=l(n),v=o(n,"P",{});var W=e(v);R=i(W,"Sort a graph so that any node on the left will point only to the nodes in the right"),W.forEach(s),x=l(n),d=o(n,"UL",{});var H=e(d);C=o(H,"LI",{});var X=e(C);V=i(X,"cannot be done for graphs that have a cycle"),X.forEach(s),O=l(H),E=o(H,"LI",{});var Y=e(E);K=i(Y,"should be a DAG(directed acyclic graph)"),Y.forEach(s),H.forEach(s),j=l(n),h=o(n,"P",{});var Z=e(h);M=i(Z,"Khan\u2019s algorithm BFS"),Z.forEach(s),A=l(n),y=o(n,"PRE",{class:!0});var cn=e(y);cn.forEach(s),S=l(n),b=o(n,"P",{});var $=e(b);U=i($,"DFS"),$.forEach(s),T=l(n),w=o(n,"PRE",{class:!0});var un=e(w);un.forEach(s),F=l(n),_=o(n,"H3",{});var nn=e(_);Q=i(nn,"References"),nn.forEach(s),G=l(n),g=o(n,"UL",{});var sn=e(g);q=o(sn,"LI",{});var an=e(q);m=o(an,"A",{href:!0,rel:!0});var pn=e(m);z=i(pn,"https://leetcode.com/problems/course-schedule/"),pn.forEach(s),an.forEach(s),sn.forEach(s),this.h()},h(){B(y,"class","language-cs"),B(w,"class","language-cs"),B(m,"href","https://leetcode.com/problems/course-schedule/"),B(m,"rel","nofollow")},m(n,a){p(n,r,a),c(r,P),p(n,L,a),p(n,f,a),c(f,I),p(n,D,a),p(n,v,a),c(v,R),p(n,x,a),p(n,d,a),c(d,C),c(C,V),c(d,O),c(d,E),c(E,K),p(n,j,a),p(n,h,a),c(h,M),p(n,A,a),p(n,y,a),y.innerHTML=on,p(n,S,a),p(n,b,a),c(b,U),p(n,T,a),p(n,w,a),w.innerHTML=en,p(n,F,a),p(n,_,a),c(_,Q),p(n,G,a),p(n,g,a),c(g,q),c(q,m),c(m,z)},p:J,i:J,o:J,d(n){n&&s(r),n&&s(L),n&&s(f),n&&s(D),n&&s(v),n&&s(x),n&&s(d),n&&s(j),n&&s(h),n&&s(A),n&&s(y),n&&s(S),n&&s(b),n&&s(T),n&&s(w),n&&s(F),n&&s(_),n&&s(G),n&&s(g)}}}class wn extends ln{constructor(r){super();kn(this,r,null,dn,rn,{})}}export{wn as default};
