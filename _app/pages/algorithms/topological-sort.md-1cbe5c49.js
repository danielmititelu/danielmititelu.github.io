import{S as sn,i as an,s as tn,e as o,t as i,k,c as e,a as c,h as r,d as s,m as d,b as U,g as t,H as p,I as M}from"../../chunks/vendor-0a633d05.js";function pn(Z){let l,O,x,w,S,b,h,H,L,u,E,P,V,g,N,T,m,R,D,y,$=`<code class="language-cs"><span class="token keyword">private</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">TopologicalSort</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> indegrees <span class="token operator">=</span> <span class="token function">CountIndegrees</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">(</span>course<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token keyword">in</span> indegrees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token class-name"><span class="token keyword">var</span></span> topologicalOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> nextNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        topologicalOrder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> dependency <span class="token keyword">in</span> graph<span class="token punctuation">[</span>nextNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            indegrees<span class="token punctuation">[</span>dependency<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>indegrees<span class="token punctuation">[</span>dependency<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> topologicalOrder<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">CountIndegrees</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> indegrees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">(</span>course<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span> <span class="token keyword">in</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        indegrees<span class="token punctuation">[</span>course<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">(</span>course<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span> <span class="token keyword">in</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prerequisite <span class="token keyword">in</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            indegrees<span class="token punctuation">[</span>prerequisite<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> indegrees<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,I,v,G,A,_,q,f,K;return{c(){l=o("h1"),O=i("Topological sort"),x=k(),w=o("p"),S=i("Time Complexity: O(V+E) // V = vertex (or node), E = edge"),b=k(),h=o("p"),H=i("Sort a graph so that any node on the left will point only to the nodes in the right"),L=k(),u=o("ul"),E=o("li"),P=i("cannot be done for graphs that have a cycle"),V=k(),g=o("li"),N=i("should be a DAG(directed acyclic graph)"),T=k(),m=o("p"),R=i("Khan\u2019s algorithm"),D=k(),y=o("pre"),I=k(),v=o("h3"),G=i("References"),A=k(),_=o("ul"),q=o("li"),f=o("a"),K=i("https://leetcode.com/problems/course-schedule/"),this.h()},l(n){l=e(n,"H1",{});var a=c(l);O=r(a,"Topological sort"),a.forEach(s),x=d(n),w=e(n,"P",{});var Q=c(w);S=r(Q,"Time Complexity: O(V+E) // V = vertex (or node), E = edge"),Q.forEach(s),b=d(n),h=e(n,"P",{});var j=c(h);H=r(j,"Sort a graph so that any node on the left will point only to the nodes in the right"),j.forEach(s),L=d(n),u=e(n,"UL",{});var C=c(u);E=e(C,"LI",{});var z=c(E);P=r(z,"cannot be done for graphs that have a cycle"),z.forEach(s),V=d(C),g=e(C,"LI",{});var B=c(g);N=r(B,"should be a DAG(directed acyclic graph)"),B.forEach(s),C.forEach(s),T=d(n),m=e(n,"P",{});var F=c(m);R=r(F,"Khan\u2019s algorithm"),F.forEach(s),D=d(n),y=e(n,"PRE",{class:!0});var nn=c(y);nn.forEach(s),I=d(n),v=e(n,"H3",{});var J=c(v);G=r(J,"References"),J.forEach(s),A=d(n),_=e(n,"UL",{});var W=c(_);q=e(W,"LI",{});var X=c(q);f=e(X,"A",{href:!0,rel:!0});var Y=c(f);K=r(Y,"https://leetcode.com/problems/course-schedule/"),Y.forEach(s),X.forEach(s),W.forEach(s),this.h()},h(){U(y,"class","language-cs"),U(f,"href","https://leetcode.com/problems/course-schedule/"),U(f,"rel","nofollow")},m(n,a){t(n,l,a),p(l,O),t(n,x,a),t(n,w,a),p(w,S),t(n,b,a),t(n,h,a),p(h,H),t(n,L,a),t(n,u,a),p(u,E),p(E,P),p(u,V),p(u,g),p(g,N),t(n,T,a),t(n,m,a),p(m,R),t(n,D,a),t(n,y,a),y.innerHTML=$,t(n,I,a),t(n,v,a),p(v,G),t(n,A,a),t(n,_,a),p(_,q),p(q,f),p(f,K)},p:M,i:M,o:M,d(n){n&&s(l),n&&s(x),n&&s(w),n&&s(b),n&&s(h),n&&s(L),n&&s(u),n&&s(T),n&&s(m),n&&s(D),n&&s(y),n&&s(I),n&&s(v),n&&s(A),n&&s(_)}}}const en={title:"Topological sort",tags:["algorithm"]};class cn extends sn{constructor(l){super();an(this,l,null,pn,tn,{})}}export{cn as default,en as metadata};
