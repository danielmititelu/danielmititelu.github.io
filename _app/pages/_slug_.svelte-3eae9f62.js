import{S as bs,i as Is,s as Ls,e as t,t as o,k as r,c as p,a as e,h as l,d as n,m as k,M as Ws,b as wn,g as c,F as s,G as Mn,w as Rs,x as Ps,y as $s,q as Rn,o as zn,B as Cs,p as Us,n as Ds}from"../chunks/vendor-cac58433.js";function sa(j){let i,w,d,y,_,v,h,R,E,L,J,_n,C,A,Pn,fn,U,$n,dn,b,V,Cn,mn,D,Un,z,Y,xn,F,Z,En,O,P,nn,bn,sn,an,hn,tn,W,pn=`<code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _parents<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        _parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            _parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> xRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> yRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xRoot <span class="token operator">==</span> yRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        _parents<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">=</span> yRoot<span class="token punctuation">;</span>
        _count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,T,en,In,I,G,yn,Ln,N,Q,Sn,on,$,ln=`<code class="language-cs"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> x<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// path compression</span>
	_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> _parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,B,cn,u,x,vn,q,Dn,H,Gn=`<code class="language-cs"><span class="token comment">//...</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _parents<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _ranks<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	_parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
	    _ranks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//...</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> xRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> yRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>xRoot <span class="token operator">==</span> yRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// union by rank</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _ranks<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">=</span> yRoot<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">></span> _ranks<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		_parents<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>
		_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,On,X,jn,gn,M,K,un,rn,An,kn,g,Fn;return{c(){i=t("h1"),w=o("Disjoint sets"),d=r(),y=t("p"),_=o("Disjoint Sets or Union find is a data structure used for finding relationships between nodes."),v=r(),h=t("p"),R=o("For example disjointed sets are ideal for the following scenarios:"),E=r(),L=t("ul"),J=t("li"),_n=o("find if a person is a direct or indirect friend of another person in a social platform"),C=r(),A=t("li"),Pn=o("given a list of flights find if there is a way to reach a destination starting from a given city"),fn=r(),U=t("p"),$n=o("Disjoint Sets or Union find implements 2 methods:"),dn=r(),b=t("ul"),V=t("li"),Cn=o("find - returns the union representative"),mn=r(),D=t("li"),Un=o("union - connects two nodes"),z=r(),Y=t("p"),xn=o("Time complexity for both find and union is smaller than O(log n) or amortized O(1) if union by rank and path compression is used."),F=r(),Z=t("p"),En=o("An array is used to represent the parents of the disjointed sets. This is how the parents array would look after the union operation is performed on the blue and red nodes:"),O=r(),P=t("p"),nn=t("img"),sn=r(),an=t("h4"),hn=o("Code example:"),tn=r(),W=t("pre"),T=r(),en=t("h4"),In=o("Path compression"),I=r(),G=t("p"),yn=o("An optimization that aims to flatten the traveral tree to the height of one so that all find operation would be completed in constant time."),Ln=r(),N=t("p"),Q=t("img"),on=r(),$=t("pre"),B=r(),cn=t("h4"),u=o("Union by rank"),x=r(),vn=t("p"),q=o("This optimization aims to always attached the smaller tree to the bigger one. An additional array is required to store the ranks of each tree."),Dn=r(),H=t("pre"),On=r(),X=t("h4"),jn=o("Problems that could be solved with union find"),gn=r(),M=t("ul"),K=t("li"),un=t("a"),rn=o("https://leetcode.com/problems/number-of-provinces/submissions/"),An=r(),kn=t("li"),g=t("a"),Fn=o("https://leetcode.com/problems/longest-consecutive-sequence/submissions/"),this.h()},l(a){i=p(a,"H1",{});var f=e(i);w=l(f,"Disjoint sets"),f.forEach(n),d=k(a),y=p(a,"P",{});var Nn=e(y);_=l(Nn,"Disjoint Sets or Union find is a data structure used for finding relationships between nodes."),Nn.forEach(n),v=k(a),h=p(a,"P",{});var Qn=e(h);R=l(Qn,"For example disjointed sets are ideal for the following scenarios:"),Qn.forEach(n),E=k(a),L=p(a,"UL",{});var Bn=e(L);J=p(Bn,"LI",{});var es=e(J);_n=l(es,"find if a person is a direct or indirect friend of another person in a social platform"),es.forEach(n),C=k(Bn),A=p(Bn,"LI",{});var os=e(A);Pn=l(os,"given a list of flights find if there is a way to reach a destination starting from a given city"),os.forEach(n),Bn.forEach(n),fn=k(a),U=p(a,"P",{});var Tn=e(U);$n=l(Tn,"Disjoint Sets or Union find implements 2 methods:"),Tn.forEach(n),dn=k(a),b=p(a,"UL",{});var Kn=e(b);V=p(Kn,"LI",{});var Hn=e(V);Cn=l(Hn,"find - returns the union representative"),Hn.forEach(n),mn=k(Kn),D=p(Kn,"LI",{});var Jn=e(D);Un=l(Jn,"union - connects two nodes"),Jn.forEach(n),Kn.forEach(n),z=k(a),Y=p(a,"P",{});var ls=e(Y);xn=l(ls,"Time complexity for both find and union is smaller than O(log n) or amortized O(1) if union by rank and path compression is used."),ls.forEach(n),F=k(a),Z=p(a,"P",{});var cs=e(Z);En=l(cs,"An array is used to represent the parents of the disjointed sets. This is how the parents array would look after the union operation is performed on the blue and red nodes:"),cs.forEach(n),O=k(a),P=p(a,"P",{});var Vn=e(P);nn=p(Vn,"IMG",{src:!0,alt:!0}),Vn.forEach(n),sn=k(a),an=p(a,"H4",{});var is=e(an);hn=l(is,"Code example:"),is.forEach(n),tn=k(a),W=p(a,"PRE",{class:!0});var fs=e(W);fs.forEach(n),T=k(a),en=p(a,"H4",{});var Wn=e(en);In=l(Wn,"Path compression"),Wn.forEach(n),I=k(a),G=p(a,"P",{});var us=e(G);yn=l(us,"An optimization that aims to flatten the traveral tree to the height of one so that all find operation would be completed in constant time."),us.forEach(n),Ln=k(a),N=p(a,"P",{});var Zn=e(N);Q=p(Zn,"IMG",{src:!0,alt:!0}),Zn.forEach(n),on=k(a),$=p(a,"PRE",{class:!0});var qn=e($);qn.forEach(n),B=k(a),cn=p(a,"H4",{});var vs=e(cn);u=l(vs,"Union by rank"),vs.forEach(n),x=k(a),vn=p(a,"P",{});var m=e(vn);q=l(m,"This optimization aims to always attached the smaller tree to the bigger one. An additional array is required to store the ranks of each tree."),m.forEach(n),Dn=k(a),H=p(a,"PRE",{class:!0});var S=e(H);S.forEach(n),On=k(a),X=p(a,"H4",{});var ds=e(X);jn=l(ds,"Problems that could be solved with union find"),ds.forEach(n),gn=k(a),M=p(a,"UL",{});var ns=e(M);K=p(ns,"LI",{});var ss=e(K);un=p(ss,"A",{href:!0,rel:!0});var ms=e(un);rn=l(ms,"https://leetcode.com/problems/number-of-provinces/submissions/"),ms.forEach(n),ss.forEach(n),An=k(ns),kn=p(ns,"LI",{});var hs=e(kn);g=p(hs,"A",{href:!0,rel:!0});var ys=e(g);Fn=l(ys,"https://leetcode.com/problems/longest-consecutive-sequence/submissions/"),ys.forEach(n),hs.forEach(n),ns.forEach(n),this.h()},h(){Ws(nn.src,bn="/DisjointSetsImg.svg")||wn(nn,"src",bn),wn(nn,"alt","image"),wn(W,"class","language-cs"),Ws(Q.src,Sn="/DisjointSetCompImg.svg")||wn(Q,"src",Sn),wn(Q,"alt","image"),wn($,"class","language-cs"),wn(H,"class","language-cs"),wn(un,"href","https://leetcode.com/problems/number-of-provinces/submissions/"),wn(un,"rel","nofollow"),wn(g,"href","https://leetcode.com/problems/longest-consecutive-sequence/submissions/"),wn(g,"rel","nofollow")},m(a,f){c(a,i,f),s(i,w),c(a,d,f),c(a,y,f),s(y,_),c(a,v,f),c(a,h,f),s(h,R),c(a,E,f),c(a,L,f),s(L,J),s(J,_n),s(L,C),s(L,A),s(A,Pn),c(a,fn,f),c(a,U,f),s(U,$n),c(a,dn,f),c(a,b,f),s(b,V),s(V,Cn),s(b,mn),s(b,D),s(D,Un),c(a,z,f),c(a,Y,f),s(Y,xn),c(a,F,f),c(a,Z,f),s(Z,En),c(a,O,f),c(a,P,f),s(P,nn),c(a,sn,f),c(a,an,f),s(an,hn),c(a,tn,f),c(a,W,f),W.innerHTML=pn,c(a,T,f),c(a,en,f),s(en,In),c(a,I,f),c(a,G,f),s(G,yn),c(a,Ln,f),c(a,N,f),s(N,Q),c(a,on,f),c(a,$,f),$.innerHTML=ln,c(a,B,f),c(a,cn,f),s(cn,u),c(a,x,f),c(a,vn,f),s(vn,q),c(a,Dn,f),c(a,H,f),H.innerHTML=Gn,c(a,On,f),c(a,X,f),s(X,jn),c(a,gn,f),c(a,M,f),s(M,K),s(K,un),s(un,rn),s(M,An),s(M,kn),s(kn,g),s(g,Fn)},p:Mn,i:Mn,o:Mn,d(a){a&&n(i),a&&n(d),a&&n(y),a&&n(v),a&&n(h),a&&n(E),a&&n(L),a&&n(fn),a&&n(U),a&&n(dn),a&&n(b),a&&n(z),a&&n(Y),a&&n(F),a&&n(Z),a&&n(O),a&&n(P),a&&n(sn),a&&n(an),a&&n(tn),a&&n(W),a&&n(T),a&&n(en),a&&n(I),a&&n(G),a&&n(Ln),a&&n(N),a&&n(on),a&&n($),a&&n(B),a&&n(cn),a&&n(x),a&&n(vn),a&&n(Dn),a&&n(H),a&&n(On),a&&n(X),a&&n(gn),a&&n(M)}}}class aa extends bs{constructor(i){super();Is(this,i,null,sa,Ls,{})}}function ta(j){let i,w,d,y,_,v,h,R,E,L,J,_n,C,A,Pn,fn,U,$n,dn,b,V,Cn,mn,D,Un,z,Y,xn,F,Z,En,O,P,nn,bn,sn,an,hn,tn,W,pn,T,en,In,I,G,yn,Ln,N,Q,Sn,on,$,ln,B,cn=`<code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinHeap</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> _heap<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        _heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        _heap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currentIndex <span class="token operator">=</span> _heap<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> parentIndex <span class="token operator">=</span> <span class="token function">GetParentIndex</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>parentIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> _heap<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">Swap</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentIndex <span class="token operator">=</span> parentIndex<span class="token punctuation">;</span>
            parentIndex <span class="token operator">=</span> <span class="token function">GetParentIndex</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetParentIndex</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ExtractMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_heap<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Heap is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name"><span class="token keyword">int</span></span> min <span class="token operator">=</span> _heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _heap<span class="token punctuation">[</span>_heap<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>_heap<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Heapify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Heapify</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> smallest <span class="token operator">=</span> index<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> _heap<span class="token punctuation">.</span>Count <span class="token operator">&amp;&amp;</span> _heap<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            smallest <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> _heap<span class="token punctuation">.</span>Count <span class="token operator">&amp;&amp;</span> _heap<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            smallest <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>smallest <span class="token operator">!=</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">Swap</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> smallest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Heapify</span><span class="token punctuation">(</span>smallest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> parentIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> _heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> _heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>&#96;&#96;&#96;</code>`;return{c(){i=t("h1"),w=o("Heap"),d=r(),y=t("p"),_=o("A heap is a complete binary tree where the any given node is smaller/bigger than it\u2019s descendents depending if it\u2019s a min/max heap"),v=r(),h=t("h3"),R=o("Heap represented as array"),E=r(),L=t("p"),J=o("A heap can easily be represented as an array:"),_n=r(),C=t("ul"),A=t("li"),Pn=o("add in array level by level"),fn=r(),U=t("li"),$n=o("if a given node is at index i to find the parent of a node: p = (i - 1) / 2 (floor value of i/2)"),dn=r(),b=t("li"),V=o("left chlid = 2 * i + 1"),Cn=r(),mn=t("li"),D=o("right child = 2 * i + 2"),Un=r(),z=t("li"),Y=o("all leaf nodes are in the last half of the array"),xn=r(),F=t("h3"),Z=o("Insert a value in the heap"),En=r(),O=t("ul"),P=t("li"),nn=o("add element at the end of array"),bn=r(),sn=t("li"),an=o("compare with parent and swap if it\u2019s smaller/bigger"),hn=r(),tn=t("li"),W=o("repeat for all parents of that node"),pn=r(),T=t("h3"),en=o("Extract min/max value from heap"),In=r(),I=t("ul"),G=t("li"),yn=o("get value from root"),Ln=r(),N=t("li"),Q=o("bring the right-most leaf(last element of array) in the root"),Sn=r(),on=t("li"),$=o("push the element down by comparing with it\u2019s children and swapping if neccesary (or [[Heapify]])"),ln=r(),B=t("pre"),this.h()},l(u){i=p(u,"H1",{});var x=e(i);w=l(x,"Heap"),x.forEach(n),d=k(u),y=p(u,"P",{});var vn=e(y);_=l(vn,"A heap is a complete binary tree where the any given node is smaller/bigger than it\u2019s descendents depending if it\u2019s a min/max heap"),vn.forEach(n),v=k(u),h=p(u,"H3",{});var q=e(h);R=l(q,"Heap represented as array"),q.forEach(n),E=k(u),L=p(u,"P",{});var Dn=e(L);J=l(Dn,"A heap can easily be represented as an array:"),Dn.forEach(n),_n=k(u),C=p(u,"UL",{});var H=e(C);A=p(H,"LI",{});var Gn=e(A);Pn=l(Gn,"add in array level by level"),Gn.forEach(n),fn=k(H),U=p(H,"LI",{});var On=e(U);$n=l(On,"if a given node is at index i to find the parent of a node: p = (i - 1) / 2 (floor value of i/2)"),On.forEach(n),dn=k(H),b=p(H,"LI",{});var X=e(b);V=l(X,"left chlid = 2 * i + 1"),X.forEach(n),Cn=k(H),mn=p(H,"LI",{});var jn=e(mn);D=l(jn,"right child = 2 * i + 2"),jn.forEach(n),Un=k(H),z=p(H,"LI",{});var gn=e(z);Y=l(gn,"all leaf nodes are in the last half of the array"),gn.forEach(n),H.forEach(n),xn=k(u),F=p(u,"H3",{});var M=e(F);Z=l(M,"Insert a value in the heap"),M.forEach(n),En=k(u),O=p(u,"UL",{});var K=e(O);P=p(K,"LI",{});var un=e(P);nn=l(un,"add element at the end of array"),un.forEach(n),bn=k(K),sn=p(K,"LI",{});var rn=e(sn);an=l(rn,"compare with parent and swap if it\u2019s smaller/bigger"),rn.forEach(n),hn=k(K),tn=p(K,"LI",{});var An=e(tn);W=l(An,"repeat for all parents of that node"),An.forEach(n),K.forEach(n),pn=k(u),T=p(u,"H3",{});var kn=e(T);en=l(kn,"Extract min/max value from heap"),kn.forEach(n),In=k(u),I=p(u,"UL",{});var g=e(I);G=p(g,"LI",{});var Fn=e(G);yn=l(Fn,"get value from root"),Fn.forEach(n),Ln=k(g),N=p(g,"LI",{});var a=e(N);Q=l(a,"bring the right-most leaf(last element of array) in the root"),a.forEach(n),Sn=k(g),on=p(g,"LI",{});var f=e(on);$=l(f,"push the element down by comparing with it\u2019s children and swapping if neccesary (or [[Heapify]])"),f.forEach(n),g.forEach(n),ln=k(u),B=p(u,"PRE",{class:!0});var Nn=e(B);Nn.forEach(n),this.h()},h(){wn(B,"class","language-cs")},m(u,x){c(u,i,x),s(i,w),c(u,d,x),c(u,y,x),s(y,_),c(u,v,x),c(u,h,x),s(h,R),c(u,E,x),c(u,L,x),s(L,J),c(u,_n,x),c(u,C,x),s(C,A),s(A,Pn),s(C,fn),s(C,U),s(U,$n),s(C,dn),s(C,b),s(b,V),s(C,Cn),s(C,mn),s(mn,D),s(C,Un),s(C,z),s(z,Y),c(u,xn,x),c(u,F,x),s(F,Z),c(u,En,x),c(u,O,x),s(O,P),s(P,nn),s(O,bn),s(O,sn),s(sn,an),s(O,hn),s(O,tn),s(tn,W),c(u,pn,x),c(u,T,x),s(T,en),c(u,In,x),c(u,I,x),s(I,G),s(G,yn),s(I,Ln),s(I,N),s(N,Q),s(I,Sn),s(I,on),s(on,$),c(u,ln,x),c(u,B,x),B.innerHTML=cn},p:Mn,i:Mn,o:Mn,d(u){u&&n(i),u&&n(d),u&&n(y),u&&n(v),u&&n(h),u&&n(E),u&&n(L),u&&n(_n),u&&n(C),u&&n(xn),u&&n(F),u&&n(En),u&&n(O),u&&n(pn),u&&n(T),u&&n(In),u&&n(I),u&&n(ln),u&&n(B)}}}class pa extends bs{constructor(i){super();Is(this,i,null,ta,Ls,{})}}function ea(j){let i,w,d,y,_,v,h,R,E,L,J,_n,C,A,Pn,fn,U,$n,dn,b,V,Cn,mn,D,Un,z,Y,xn,F,Z,En,O,P,nn,bn,sn,an,hn,tn,W,pn,T,en,In,I,G,yn,Ln,N,Q,Sn,on,$,ln,B,cn,u,x,vn,q,Dn,H,Gn,On,X,jn,gn,M,K,un,rn,An,kn,g,Fn,a,f,Nn,Qn,Bn,es,os,Tn,Kn,Hn,Jn,ls,cs,Vn,is,fs,Wn,us,Zn,qn,vs=`<code class="language-cs"><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">FindKthLargest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> k<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> kthIndex <span class="token operator">=</span> nums<span class="token punctuation">.</span>Length <span class="token operator">-</span> k<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pivotIdx <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pivotIdx <span class="token operator">==</span> kthIndex<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pivotIdx <span class="token operator">&lt;</span> kthIndex<span class="token punctuation">)</span>
            left <span class="token operator">=</span> pivotIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            right <span class="token operator">=</span> pivotIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>kthIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> left<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> right<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> pivotIdx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pivotIdx<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> storeIndex <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">Swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> storeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storeIndex<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">Swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> storeIndex<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> storeIndex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pivot<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> right<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){i=t("h1"),w=o("Quickselect"),d=r(),y=t("h4"),_=o("Quick select or Hoare\u2019s selection algorithm"),v=r(),h=t("p"),R=o("Time complexity:"),E=r(),L=t("ul"),J=t("li"),_n=o("average case O(N)"),C=r(),A=t("li"),Pn=o("worst case O(N^2)"),fn=r(),U=t("p"),$n=o("Algoritm steps:"),dn=r(),b=t("ul"),V=t("li"),Cn=o("figure out k-th index(smallest: k, biggest: n - k)"),mn=r(),D=t("li"),Un=o("add 2 pointers ("),z=t("code"),Y=o("left"),xn=o(" and "),F=t("code"),Z=o("right"),En=o(") for the start and end of the array, similar to binary search"),O=r(),P=t("li"),nn=o("while "),bn=t("code"),sn=o("left"),an=o(" is smaller than "),hn=t("code"),tn=o("right"),W=o(" pick a random index as pivot and partition:"),pn=t("ul"),T=t("li"),en=o("save the pivot in the right pointer"),In=r(),I=t("li"),G=o("starting from left with 2 pointers: "),yn=t("code"),Ln=o("storeIndex"),N=o(" and "),Q=t("code"),Sn=o("i"),on=o(":"),$=t("ul"),ln=t("li"),B=o("move "),cn=t("code"),u=o("i"),x=o(" forword untill it reaches the right pointer,"),vn=r(),q=t("li"),Dn=o("every time "),H=t("code"),Gn=o("i"),On=o(" finds a value smaller than the pivot, swap it with "),X=t("code"),jn=o("storeIndex"),gn=o(" and increment "),M=t("code"),K=o("storeIndex"),un=r(),rn=t("li"),An=o("at the end swap "),kn=t("code"),g=o("storeIndex"),Fn=o(" with the pivot stored in right pointer"),a=r(),f=t("li"),Nn=o("return "),Qn=t("code"),Bn=o("storeIndex"),es=o(", this is our pivot in it\u2019s final ordered position"),os=r(),Tn=t("li"),Kn=o("similar to binary search compare pivot index with the k-th index:"),Hn=t("ul"),Jn=t("li"),ls=o("if they are equal then we found the k-th element"),cs=r(),Vn=t("li"),is=o("if pivot index is bigger, seach in the left part of the pivot where there are smaller values"),fs=r(),Wn=t("li"),us=o("if pivot index is smaller, search in the right part"),Zn=r(),qn=t("pre"),this.h()},l(m){i=p(m,"H1",{});var S=e(i);w=l(S,"Quickselect"),S.forEach(n),d=k(m),y=p(m,"H4",{});var ds=e(y);_=l(ds,"Quick select or Hoare\u2019s selection algorithm"),ds.forEach(n),v=k(m),h=p(m,"P",{});var ns=e(h);R=l(ns,"Time complexity:"),ns.forEach(n),E=k(m),L=p(m,"UL",{});var ss=e(L);J=p(ss,"LI",{});var ms=e(J);_n=l(ms,"average case O(N)"),ms.forEach(n),C=k(ss),A=p(ss,"LI",{});var hs=e(A);Pn=l(hs,"worst case O(N^2)"),hs.forEach(n),ss.forEach(n),fn=k(m),U=p(m,"P",{});var ys=e(U);$n=l(ys,"Algoritm steps:"),ys.forEach(n),dn=k(m),b=p(m,"UL",{});var Xn=e(b);V=p(Xn,"LI",{});var Os=e(V);Cn=l(Os,"figure out k-th index(smallest: k, biggest: n - k)"),Os.forEach(n),mn=k(Xn),D=p(Xn,"LI",{});var rs=e(D);Un=l(rs,"add 2 pointers ("),z=p(rs,"CODE",{});var gs=e(z);Y=l(gs,"left"),gs.forEach(n),xn=l(rs," and "),F=p(rs,"CODE",{});var Ss=e(F);Z=l(Ss,"right"),Ss.forEach(n),En=l(rs,") for the start and end of the array, similar to binary search"),rs.forEach(n),O=k(Xn),P=p(Xn,"LI",{});var as=e(P);nn=l(as,"while "),bn=p(as,"CODE",{});var js=e(bn);sn=l(js,"left"),js.forEach(n),an=l(as," is smaller than "),hn=p(as,"CODE",{});var As=e(hn);tn=l(As,"right"),As.forEach(n),W=l(as," pick a random index as pivot and partition:"),pn=p(as,"UL",{});var ws=e(pn);T=p(ws,"LI",{});var Fs=e(T);en=l(Fs,"save the pivot in the right pointer"),Fs.forEach(n),In=k(ws),I=p(ws,"LI",{});var ts=e(I);G=l(ts,"starting from left with 2 pointers: "),yn=p(ts,"CODE",{});var Ts=e(yn);Ln=l(Ts,"storeIndex"),Ts.forEach(n),N=l(ts," and "),Q=p(ts,"CODE",{});var qs=e(Q);Sn=l(qs,"i"),qs.forEach(n),on=l(ts,":"),$=p(ts,"UL",{});var Yn=e($);ln=p(Yn,"LI",{});var _s=e(ln);B=l(_s,"move "),cn=p(_s,"CODE",{});var Ms=e(cn);u=l(Ms,"i"),Ms.forEach(n),x=l(_s," forword untill it reaches the right pointer,"),_s.forEach(n),vn=k(Yn),q=p(Yn,"LI",{});var ps=e(q);Dn=l(ps,"every time "),H=p(ps,"CODE",{});var zs=e(H);Gn=l(zs,"i"),zs.forEach(n),On=l(ps," finds a value smaller than the pivot, swap it with "),X=p(ps,"CODE",{});var Gs=e(X);jn=l(Gs,"storeIndex"),Gs.forEach(n),gn=l(ps," and increment "),M=p(ps,"CODE",{});var Ns=e(M);K=l(Ns,"storeIndex"),Ns.forEach(n),ps.forEach(n),un=k(Yn),rn=p(Yn,"LI",{});var xs=e(rn);An=l(xs,"at the end swap "),kn=p(xs,"CODE",{});var Qs=e(kn);g=l(Qs,"storeIndex"),Qs.forEach(n),Fn=l(xs," with the pivot stored in right pointer"),xs.forEach(n),a=k(Yn),f=p(Yn,"LI",{});var Es=e(f);Nn=l(Es,"return "),Qn=p(Es,"CODE",{});var Bs=e(Qn);Bn=l(Bs,"storeIndex"),Bs.forEach(n),es=l(Es,", this is our pivot in it\u2019s final ordered position"),Es.forEach(n),Yn.forEach(n),ts.forEach(n),ws.forEach(n),as.forEach(n),os=k(Xn),Tn=p(Xn,"LI",{});var Hs=e(Tn);Kn=l(Hs,"similar to binary search compare pivot index with the k-th index:"),Hn=p(Hs,"UL",{});var ks=e(Hn);Jn=p(ks,"LI",{});var Ks=e(Jn);ls=l(Ks,"if they are equal then we found the k-th element"),Ks.forEach(n),cs=k(ks),Vn=p(ks,"LI",{});var Js=e(Vn);is=l(Js,"if pivot index is bigger, seach in the left part of the pivot where there are smaller values"),Js.forEach(n),fs=k(ks),Wn=p(ks,"LI",{});var Vs=e(Wn);us=l(Vs,"if pivot index is smaller, search in the right part"),Vs.forEach(n),ks.forEach(n),Hs.forEach(n),Xn.forEach(n),Zn=k(m),qn=p(m,"PRE",{class:!0});var na=e(qn);na.forEach(n),this.h()},h(){wn(qn,"class","language-cs")},m(m,S){c(m,i,S),s(i,w),c(m,d,S),c(m,y,S),s(y,_),c(m,v,S),c(m,h,S),s(h,R),c(m,E,S),c(m,L,S),s(L,J),s(J,_n),s(L,C),s(L,A),s(A,Pn),c(m,fn,S),c(m,U,S),s(U,$n),c(m,dn,S),c(m,b,S),s(b,V),s(V,Cn),s(b,mn),s(b,D),s(D,Un),s(D,z),s(z,Y),s(D,xn),s(D,F),s(F,Z),s(D,En),s(b,O),s(b,P),s(P,nn),s(P,bn),s(bn,sn),s(P,an),s(P,hn),s(hn,tn),s(P,W),s(P,pn),s(pn,T),s(T,en),s(pn,In),s(pn,I),s(I,G),s(I,yn),s(yn,Ln),s(I,N),s(I,Q),s(Q,Sn),s(I,on),s(I,$),s($,ln),s(ln,B),s(ln,cn),s(cn,u),s(ln,x),s($,vn),s($,q),s(q,Dn),s(q,H),s(H,Gn),s(q,On),s(q,X),s(X,jn),s(q,gn),s(q,M),s(M,K),s($,un),s($,rn),s(rn,An),s(rn,kn),s(kn,g),s(rn,Fn),s($,a),s($,f),s(f,Nn),s(f,Qn),s(Qn,Bn),s(f,es),s(b,os),s(b,Tn),s(Tn,Kn),s(Tn,Hn),s(Hn,Jn),s(Jn,ls),s(Hn,cs),s(Hn,Vn),s(Vn,is),s(Hn,fs),s(Hn,Wn),s(Wn,us),c(m,Zn,S),c(m,qn,S),qn.innerHTML=vs},p:Mn,i:Mn,o:Mn,d(m){m&&n(i),m&&n(d),m&&n(y),m&&n(v),m&&n(h),m&&n(E),m&&n(L),m&&n(fn),m&&n(U),m&&n(dn),m&&n(b),m&&n(Zn),m&&n(qn)}}}class oa extends bs{constructor(i){super();Is(this,i,null,ea,Ls,{})}}function Xs(j){let i,w;return i=new aa({}),{c(){Rs(i.$$.fragment)},l(d){Ps(i.$$.fragment,d)},m(d,y){$s(i,d,y),w=!0},i(d){w||(Rn(i.$$.fragment,d),w=!0)},o(d){zn(i.$$.fragment,d),w=!1},d(d){Cs(i,d)}}}function Ys(j){let i,w;return i=new pa({}),{c(){Rs(i.$$.fragment)},l(d){Ps(i.$$.fragment,d)},m(d,y){$s(i,d,y),w=!0},i(d){w||(Rn(i.$$.fragment,d),w=!0)},o(d){zn(i.$$.fragment,d),w=!1},d(d){Cs(i,d)}}}function Zs(j){let i,w;return i=new oa({}),{c(){Rs(i.$$.fragment)},l(d){Ps(i.$$.fragment,d)},m(d,y){$s(i,d,y),w=!0},i(d){w||(Rn(i.$$.fragment,d),w=!0)},o(d){zn(i.$$.fragment,d),w=!1},d(d){Cs(i,d)}}}function la(j){let i,w,d,y,_=j[0]=="disjoint-sets"&&Xs(),v=j[0]=="heap"&&Ys(),h=j[0]=="quick-select"&&Zs();return{c(){i=t("section"),_&&_.c(),w=r(),v&&v.c(),d=r(),h&&h.c()},l(R){i=p(R,"SECTION",{});var E=e(i);_&&_.l(E),w=k(E),v&&v.l(E),d=k(E),h&&h.l(E),E.forEach(n)},m(R,E){c(R,i,E),_&&_.m(i,null),s(i,w),v&&v.m(i,null),s(i,d),h&&h.m(i,null),y=!0},p(R,[E]){R[0]=="disjoint-sets"?_?E&1&&Rn(_,1):(_=Xs(),_.c(),Rn(_,1),_.m(i,w)):_&&(Ds(),zn(_,1,1,()=>{_=null}),Us()),R[0]=="heap"?v?E&1&&Rn(v,1):(v=Ys(),v.c(),Rn(v,1),v.m(i,d)):v&&(Ds(),zn(v,1,1,()=>{v=null}),Us()),R[0]=="quick-select"?h?E&1&&Rn(h,1):(h=Zs(),h.c(),Rn(h,1),h.m(i,null)):h&&(Ds(),zn(h,1,1,()=>{h=null}),Us())},i(R){y||(Rn(_),Rn(v),Rn(h),y=!0)},o(R){zn(_),zn(v),zn(h),y=!1},d(R){R&&n(i),_&&_.d(),v&&v.d(),h&&h.d()}}}function ua({params:j}){const{slug:i}=j;return{props:{slug:i}}}function ca(j,i,w){let{slug:d}=i;return j.$$set=y=>{"slug"in y&&w(0,d=y.slug)},[d]}class ra extends bs{constructor(i){super();Is(this,i,ca,la,Ls,{slug:0})}}export{ra as default,ua as load};
