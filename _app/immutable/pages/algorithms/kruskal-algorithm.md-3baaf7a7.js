import{S as gn,i as _n,s as En,l as o,u as l,a as u,m as e,p as c,v as i,h as s,c as k,q as T,b as p,F as t,n as sn}from"../../chunks/index-a3d3ad5c.js";function bn(yn){let r,G,K,w,N,C,d,x,L,R,z,A,S,B,V,v,J,H,g,Q,q,_,W,I,E,X,O,f,wn=`<code class="language-cs"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">)</span></span> <span class="token function">Kruskal</span><span class="token punctuation">(</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">></span></span> edges<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> length<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// a disjoined set is used for finding cycles</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DisjointSets</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// minimum spanning tree</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// sort edges by increasing distance</span>
    edges<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>dist<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> edge <span class="token keyword">in</span> edges<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// if the next min edge does not form a cycle then add it to the mst</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ds<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>source<span class="token punctuation">)</span> <span class="token operator">!=</span> ds<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">//</span>
            ds<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>source<span class="token punctuation">,</span> edge<span class="token punctuation">.</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mst<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>
                mst<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mst<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span>
                mst<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>dest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> dist<span class="token punctuation">)</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// mst is non directional so add both directions</span>
            mst<span class="token punctuation">[</span>edge<span class="token punctuation">.</span>source<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>dest<span class="token punctuation">,</span> edge<span class="token punctuation">.</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mst<span class="token punctuation">[</span>edge<span class="token punctuation">.</span>dest<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>source<span class="token punctuation">,</span> edge<span class="token punctuation">.</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            cost <span class="token operator">+=</span> edge<span class="token punctuation">.</span>dist<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>cost<span class="token punctuation">,</span> mst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,D,b,Y,F,m,M,h,Z,$,P,y,nn;return{c(){r=o("h1"),G=l("Kruskal\u2019s Algorithm"),K=u(),w=o("p"),N=l("Greedy alghorithm used to find the minimum spanning tree of a given graph"),C=u(),d=o("ul"),x=o("li"),L=o("p"),R=l("Time complexity: O(Elog(E))"),z=u(),A=o("li"),S=o("p"),B=l("Space complexity: O(E + V)"),V=u(),v=o("h2"),J=l("Minimum spanning tree"),H=u(),g=o("p"),Q=l("A Minimum spanning tree(MST for short) is a subgraph of a cyclic, undirected graph that will connected all the vertices and contain no cycles."),q=u(),_=o("p"),W=l("Number of edges of the MST is equal to V - 1 where V is the number of vertices of the bigger graph"),I=u(),E=o("h2"),X=l("Code example"),O=u(),f=o("pre"),D=u(),b=o("h2"),Y=l("Problems"),F=u(),m=o("ul"),M=o("li"),h=o("a"),Z=l("https://leetcode.com/problems/connecting-cities-with-minimum-cost/"),$=u(),P=o("li"),y=o("a"),nn=l("https://leetcode.com/problems/min-cost-to-connect-all-points/"),this.h()},l(n){r=e(n,"H1",{});var a=c(r);G=i(a,"Kruskal\u2019s Algorithm"),a.forEach(s),K=k(n),w=e(n,"P",{});var an=c(w);N=i(an,"Greedy alghorithm used to find the minimum spanning tree of a given graph"),an.forEach(s),C=k(n),d=e(n,"UL",{});var U=c(d);x=e(U,"LI",{});var tn=c(x);L=e(tn,"P",{});var pn=c(L);R=i(pn,"Time complexity: O(Elog(E))"),pn.forEach(s),tn.forEach(s),z=k(U),A=e(U,"LI",{});var on=c(A);S=e(on,"P",{});var en=c(S);B=i(en,"Space complexity: O(E + V)"),en.forEach(s),on.forEach(s),U.forEach(s),V=k(n),v=e(n,"H2",{});var cn=c(v);J=i(cn,"Minimum spanning tree"),cn.forEach(s),H=k(n),g=e(n,"P",{});var ln=c(g);Q=i(ln,"A Minimum spanning tree(MST for short) is a subgraph of a cyclic, undirected graph that will connected all the vertices and contain no cycles."),ln.forEach(s),q=k(n),_=e(n,"P",{});var un=c(_);W=i(un,"Number of edges of the MST is equal to V - 1 where V is the number of vertices of the bigger graph"),un.forEach(s),I=k(n),E=e(n,"H2",{});var kn=c(E);X=i(kn,"Code example"),kn.forEach(s),O=k(n),f=e(n,"PRE",{class:!0});var vn=c(f);vn.forEach(s),D=k(n),b=e(n,"H2",{});var rn=c(b);Y=i(rn,"Problems"),rn.forEach(s),F=k(n),m=e(n,"UL",{});var j=c(m);M=e(j,"LI",{});var dn=c(M);h=e(dn,"A",{href:!0,rel:!0});var mn=c(h);Z=i(mn,"https://leetcode.com/problems/connecting-cities-with-minimum-cost/"),mn.forEach(s),dn.forEach(s),$=k(j),P=e(j,"LI",{});var fn=c(P);y=e(fn,"A",{href:!0,rel:!0});var hn=c(y);nn=i(hn,"https://leetcode.com/problems/min-cost-to-connect-all-points/"),hn.forEach(s),fn.forEach(s),j.forEach(s),this.h()},h(){T(f,"class","language-cs"),T(h,"href","https://leetcode.com/problems/connecting-cities-with-minimum-cost/"),T(h,"rel","nofollow"),T(y,"href","https://leetcode.com/problems/min-cost-to-connect-all-points/"),T(y,"rel","nofollow")},m(n,a){p(n,r,a),t(r,G),p(n,K,a),p(n,w,a),t(w,N),p(n,C,a),p(n,d,a),t(d,x),t(x,L),t(L,R),t(d,z),t(d,A),t(A,S),t(S,B),p(n,V,a),p(n,v,a),t(v,J),p(n,H,a),p(n,g,a),t(g,Q),p(n,q,a),p(n,_,a),t(_,W),p(n,I,a),p(n,E,a),t(E,X),p(n,O,a),p(n,f,a),f.innerHTML=wn,p(n,D,a),p(n,b,a),t(b,Y),p(n,F,a),p(n,m,a),t(m,M),t(M,h),t(h,Z),t(m,$),t(m,P),t(P,y),t(y,nn)},p:sn,i:sn,o:sn,d(n){n&&s(r),n&&s(K),n&&s(w),n&&s(C),n&&s(d),n&&s(V),n&&s(v),n&&s(H),n&&s(g),n&&s(q),n&&s(_),n&&s(I),n&&s(E),n&&s(O),n&&s(f),n&&s(D),n&&s(b),n&&s(F),n&&s(m)}}}const Ln={title:"Kruskal's Algorithm",tags:["algorithm"]};class An extends gn{constructor(r){super(),_n(this,r,null,bn,En,{})}}export{An as default,Ln as metadata};
