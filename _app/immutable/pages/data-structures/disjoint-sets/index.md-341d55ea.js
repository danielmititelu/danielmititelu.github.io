import{S as wn,i as vn,s as bn,l as e,u as r,a as i,m as p,p as l,v as u,h as n,c,M as mn,q as k,b as o,F as t,n as Os}from"../../../chunks/index-a3d3ad5c.js";function En(hn){let d,fs,V,x,ds,W,j,ms,X,m,O,hs,ys,M,_s,Y,R,ws,Z,h,G,vs,bs,B,Es,$,P,xs,g,L,js,ss,D,A,Ms,ns,I,Rs,as,U,Ps,ts,q,Ls,os,z,Ds,es,S,As,ps,C,F,Gs,ls,H,Is,is,_,yn=`<code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisjointSets</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _parents<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _ranks<span class="token punctuation">;</span>
    
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token function">DisjointSets</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        _parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _ranks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        Count <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            _parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            _ranks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// path compression</span>
        _parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>_parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> _parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> xRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> yRoot <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xRoot <span class="token operator">==</span> yRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// union by rank</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span> _ranks<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            _parents<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">=</span> yRoot<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">></span> _ranks<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            _parents<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            _parents<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>
            _ranks<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        Count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,cs,T,Us,rs,f,J,w,qs,zs,K,v,Ss,Cs,N,b,Fs,Hs,Q,E,Ts;return{c(){d=e("h1"),fs=r("Disjoint sets"),V=i(),x=e("p"),ds=r("Disjoint Sets or Union find is a data structure used for finding relationships between nodes."),W=i(),j=e("p"),ms=r("For example disjointed sets are ideal for the following scenarios:"),X=i(),m=e("ul"),O=e("li"),hs=r("find if a person is a direct or indirect friend of another person in a social platform"),ys=i(),M=e("li"),_s=r("given a list of flights find if there is a way to reach a destination starting from a given city"),Y=i(),R=e("p"),ws=r("Disjoint Sets or Union find implements 2 methods:"),Z=i(),h=e("ul"),G=e("li"),vs=r("find - returns the union representative"),bs=i(),B=e("li"),Es=r("union - connects two nodes"),$=i(),P=e("p"),xs=r("Time complexity for both find and union is smaller than O(log n) or amortized O(1) if union by rank and path compression is used."),g=i(),L=e("p"),js=r("An array is used to represent the parents of the disjointed sets. This is how the parents array would look after the union operation is performed on the blue and red nodes:"),ss=i(),D=e("p"),A=e("img"),ns=i(),I=e("h2"),Rs=r("Optimizations"),as=i(),U=e("h4"),Ps=r("Path compression"),ts=i(),q=e("p"),Ls=r("An optimization that aims to flatten the traversal tree to the height of one so that all find operation would be completed in constant time."),os=i(),z=e("h4"),Ds=r("Union by rank"),es=i(),S=e("p"),As=r("This optimization aims to always attached the smaller tree to the bigger one. An additional array is required to store the ranks of each tree."),ps=i(),C=e("p"),F=e("img"),ls=i(),H=e("h4"),Is=r("Code example:"),is=i(),_=e("pre"),cs=i(),T=e("h4"),Us=r("Problems that could be solved with union find"),rs=i(),f=e("ul"),J=e("li"),w=e("a"),qs=r("https://leetcode.com/problems/number-of-provinces/"),zs=i(),K=e("li"),v=e("a"),Ss=r("https://leetcode.com/problems/longest-consecutive-sequence/"),Cs=i(),N=e("li"),b=e("a"),Fs=r("https://leetcode.com/problems/accounts-merge/"),Hs=i(),Q=e("li"),E=e("a"),Ts=r("https://leetcode.com/problems/redundant-connection/"),this.h()},l(s){d=p(s,"H1",{});var a=l(d);fs=u(a,"Disjoint sets"),a.forEach(n),V=c(s),x=p(s,"P",{});var Bs=l(x);ds=u(Bs,"Disjoint Sets or Union find is a data structure used for finding relationships between nodes."),Bs.forEach(n),W=c(s),j=p(s,"P",{});var Js=l(j);ms=u(Js,"For example disjointed sets are ideal for the following scenarios:"),Js.forEach(n),X=c(s),m=p(s,"UL",{});var us=l(m);O=p(us,"LI",{});var Ks=l(O);hs=u(Ks,"find if a person is a direct or indirect friend of another person in a social platform"),Ks.forEach(n),ys=c(us),M=p(us,"LI",{});var Ns=l(M);_s=u(Ns,"given a list of flights find if there is a way to reach a destination starting from a given city"),Ns.forEach(n),us.forEach(n),Y=c(s),R=p(s,"P",{});var Qs=l(R);ws=u(Qs,"Disjoint Sets or Union find implements 2 methods:"),Qs.forEach(n),Z=c(s),h=p(s,"UL",{});var ks=l(h);G=p(ks,"LI",{});var Vs=l(G);vs=u(Vs,"find - returns the union representative"),Vs.forEach(n),bs=c(ks),B=p(ks,"LI",{});var Ws=l(B);Es=u(Ws,"union - connects two nodes"),Ws.forEach(n),ks.forEach(n),$=c(s),P=p(s,"P",{});var Xs=l(P);xs=u(Xs,"Time complexity for both find and union is smaller than O(log n) or amortized O(1) if union by rank and path compression is used."),Xs.forEach(n),g=c(s),L=p(s,"P",{});var Ys=l(L);js=u(Ys,"An array is used to represent the parents of the disjointed sets. This is how the parents array would look after the union operation is performed on the blue and red nodes:"),Ys.forEach(n),ss=c(s),D=p(s,"P",{});var Zs=l(D);A=p(Zs,"IMG",{src:!0,alt:!0}),Zs.forEach(n),ns=c(s),I=p(s,"H2",{});var $s=l(I);Rs=u($s,"Optimizations"),$s.forEach(n),as=c(s),U=p(s,"H4",{});var gs=l(U);Ps=u(gs,"Path compression"),gs.forEach(n),ts=c(s),q=p(s,"P",{});var sn=l(q);Ls=u(sn,"An optimization that aims to flatten the traversal tree to the height of one so that all find operation would be completed in constant time."),sn.forEach(n),os=c(s),z=p(s,"H4",{});var nn=l(z);Ds=u(nn,"Union by rank"),nn.forEach(n),es=c(s),S=p(s,"P",{});var an=l(S);As=u(an,"This optimization aims to always attached the smaller tree to the bigger one. An additional array is required to store the ranks of each tree."),an.forEach(n),ps=c(s),C=p(s,"P",{});var tn=l(C);F=p(tn,"IMG",{src:!0,alt:!0}),tn.forEach(n),ls=c(s),H=p(s,"H4",{});var on=l(H);Is=u(on,"Code example:"),on.forEach(n),is=c(s),_=p(s,"PRE",{class:!0});var _n=l(_);_n.forEach(n),cs=c(s),T=p(s,"H4",{});var en=l(T);Us=u(en,"Problems that could be solved with union find"),en.forEach(n),rs=c(s),f=p(s,"UL",{});var y=l(f);J=p(y,"LI",{});var pn=l(J);w=p(pn,"A",{href:!0,rel:!0});var ln=l(w);qs=u(ln,"https://leetcode.com/problems/number-of-provinces/"),ln.forEach(n),pn.forEach(n),zs=c(y),K=p(y,"LI",{});var cn=l(K);v=p(cn,"A",{href:!0,rel:!0});var rn=l(v);Ss=u(rn,"https://leetcode.com/problems/longest-consecutive-sequence/"),rn.forEach(n),cn.forEach(n),Cs=c(y),N=p(y,"LI",{});var un=l(N);b=p(un,"A",{href:!0,rel:!0});var kn=l(b);Fs=u(kn,"https://leetcode.com/problems/accounts-merge/"),kn.forEach(n),un.forEach(n),Hs=c(y),Q=p(y,"LI",{});var fn=l(Q);E=p(fn,"A",{href:!0,rel:!0});var dn=l(E);Ts=u(dn,"https://leetcode.com/problems/redundant-connection/"),dn.forEach(n),fn.forEach(n),y.forEach(n),this.h()},h(){mn(A.src,Ms="/disjoint-sets.svg")||k(A,"src",Ms),k(A,"alt","Disjoint sets representation"),mn(F.src,Gs="/disjoint-sets-completed.svg")||k(F,"src",Gs),k(F,"alt","Completed disjointed sets"),k(_,"class","language-cs"),k(w,"href","https://leetcode.com/problems/number-of-provinces/"),k(w,"rel","nofollow"),k(v,"href","https://leetcode.com/problems/longest-consecutive-sequence/"),k(v,"rel","nofollow"),k(b,"href","https://leetcode.com/problems/accounts-merge/"),k(b,"rel","nofollow"),k(E,"href","https://leetcode.com/problems/redundant-connection/"),k(E,"rel","nofollow")},m(s,a){o(s,d,a),t(d,fs),o(s,V,a),o(s,x,a),t(x,ds),o(s,W,a),o(s,j,a),t(j,ms),o(s,X,a),o(s,m,a),t(m,O),t(O,hs),t(m,ys),t(m,M),t(M,_s),o(s,Y,a),o(s,R,a),t(R,ws),o(s,Z,a),o(s,h,a),t(h,G),t(G,vs),t(h,bs),t(h,B),t(B,Es),o(s,$,a),o(s,P,a),t(P,xs),o(s,g,a),o(s,L,a),t(L,js),o(s,ss,a),o(s,D,a),t(D,A),o(s,ns,a),o(s,I,a),t(I,Rs),o(s,as,a),o(s,U,a),t(U,Ps),o(s,ts,a),o(s,q,a),t(q,Ls),o(s,os,a),o(s,z,a),t(z,Ds),o(s,es,a),o(s,S,a),t(S,As),o(s,ps,a),o(s,C,a),t(C,F),o(s,ls,a),o(s,H,a),t(H,Is),o(s,is,a),o(s,_,a),_.innerHTML=yn,o(s,cs,a),o(s,T,a),t(T,Us),o(s,rs,a),o(s,f,a),t(f,J),t(J,w),t(w,qs),t(f,zs),t(f,K),t(K,v),t(v,Ss),t(f,Cs),t(f,N),t(N,b),t(b,Fs),t(f,Hs),t(f,Q),t(Q,E),t(E,Ts)},p:Os,i:Os,o:Os,d(s){s&&n(d),s&&n(V),s&&n(x),s&&n(W),s&&n(j),s&&n(X),s&&n(m),s&&n(Y),s&&n(R),s&&n(Z),s&&n(h),s&&n($),s&&n(P),s&&n(g),s&&n(L),s&&n(ss),s&&n(D),s&&n(ns),s&&n(I),s&&n(as),s&&n(U),s&&n(ts),s&&n(q),s&&n(os),s&&n(z),s&&n(es),s&&n(S),s&&n(ps),s&&n(C),s&&n(ls),s&&n(H),s&&n(is),s&&n(_),s&&n(cs),s&&n(T),s&&n(rs),s&&n(f)}}}const jn={title:"Disjoint sets",tags:["data-structure"]};class Rn extends wn{constructor(d){super(),vn(this,d,null,En,bn,{})}}export{Rn as default,jn as metadata};
