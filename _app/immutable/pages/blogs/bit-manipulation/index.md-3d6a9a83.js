import{S as Zs,i as $s,s as gs,l,u as r,a as c,m as i,p as o,v as p,h as t,c as f,M as Yt,q as h,b as n,F as s,n as Zt}from"../../../chunks/index-a3d3ad5c.js";function ea(Fs){let d,tt,ve,O,st,ke,T,at,_e,A,nt,Ee,S,lt,Be,R,it,Le,D,ot,xe,q,G,$t,He,W,rt,Pe,N,pt,Ie,U,ct,Ce,w,js=`<code class="language-cs"><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// integers ocupy 4 bytes </span>

<span class="token comment">// Little-endian (how ARM x86 and x64 architechtures work)</span>
<span class="token comment">// 0000 0110  0000 0000  0000 0000  0000 0000</span>

<span class="token comment">// Big-endian</span>
<span class="token comment">// 0000 0000  0000 0000  0000 0000  0000 0110 </span></code>`,Me,F,ft,Oe,j,ht,Te,v,zs=`<code class="language-cs"><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">;</span>

<span class="token comment">// binary:      0100 1111  0000 0000  0000 0000  0000 0000</span>
<span class="token comment">// haxadecimal:   4    F     0    0     0    0     0    0</span>

<span class="token comment">// haxadecimal without the spaces: 4F 00 00 00</span></code>`,Ae,z,mt,Se,m,ae,k,ut,ne,bt,dt,yt,le,_,wt,ie,vt,kt,_t,oe,E,Et,re,Bt,Lt,xt,pe,B,Ht,ce,Pt,It,Ct,fe,L,Mt,he,Ot,Tt,Re,X,J,gt,De,K,x,At,me,St,Rt,qe,Q,V,es,Ge,Y,Dt,We,Z,qt,Ne,y,ue,Gt,Wt,be,Nt,Ue,$,Ut,Fe,g,Ft,je,H,Xs=`<code class="language-cs"><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> bit <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// first bit is 1</span></code>`,ze,ee,jt,Xe,P,Js=`<code class="language-cs"><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">HammingWeight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">uint</span></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> bit <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bit <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
        n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>        
<span class="token punctuation">&#125;</span></code>`,Je,te,zt,Ke,u,de,I,Xt,Jt,ye,C,Kt,Qt,we,M,Vt;return{c(){d=l("h1"),tt=r("A few words about bit manipulation"),ve=c(),O=l("p"),st=r("Bit manipulation is not a technique that comes often when writing code especially when dealing with higher level languages, regardless it is useful to understand how computers work behind the scene."),ke=c(),T=l("h2"),at=r("Bit"),_e=c(),A=l("p"),nt=r("The smallest data use to represent a piece of information in computers are bits and they represent an electrical current that is stored in a memory chip. This bit can either be on or off and the notation 1 and 0 from binary system is used to denote it\u2019s state."),Ee=c(),S=l("h2"),lt=r("Byte"),Be=c(),R=l("p"),it=r("A collection of 8 adjacent bits form a byte or octet. Since it\u2019s comprised of 8 bits that can have the value either 1 or 0, a byte can have a value in the interval [0, 255] (2 to the power of 8 or 256 values)."),Le=c(),D=l("h3"),ot=r("6 representation in a byte:"),xe=c(),q=l("p"),G=l("img"),He=c(),W=l("p"),rt=r("Modern computer architechtures use memory registers of size four bytes (32-bit) or eight bytes (64-bit)."),Pe=c(),N=l("h2"),pt=r("Endianness"),Ie=c(),U=l("p"),ct=r("Endianess refers to the order the bytes are stored in a computer memory. The most common order in processor architecture is called Little-endian where the least significant byte (the byte that contains the smallest bits) is stored in the left or the smallest address memory. In contrast Big-endian will store the least significant byte on the right."),Ce=c(),w=l("pre"),Me=c(),F=l("h2"),ft=r("Hexadecimal"),Oe=c(),j=l("p"),ht=r("While binary system is used to represent the state of the memory capacitor that can only hold 2 states 1 or 0, hexadecimal system (base 16 numeral system) is usually used by memory diagnosters or when the state of the memory needs to be presented in a human readable form. One digit in hex system can represent 16 states or 4 bits which means each byte of data can represented by two hexadecimal digits."),Te=c(),v=l("pre"),Ae=c(),z=l("h2"),mt=r("Bit operations"),Se=c(),m=l("ul"),ae=l("li"),k=l("p"),ut=r("Bitwise complement ( "),ne=l("code"),bt=r("~"),dt=r(` ) ->
Caclulates the complement of a bit pattern by reversing each bit`),yt=c(),le=l("li"),_=l("p"),wt=r("Bitwise logical AND ( "),ie=l("code"),vt=r("&"),kt=r(` ) ->
Compares two operands and returns a bit pattern that shows which bits are 1 in both of them`),_t=c(),oe=l("li"),E=l("p"),Et=r("Bitwise logical OR ( "),re=l("code"),Bt=r("|"),Lt=r(` ) ->
Compares two operands and returns a bit pattern that shows which bits are 1 in either one`),xt=c(),pe=l("li"),B=l("p"),Ht=r("Bitwise logical XOR ( "),ce=l("code"),Pt=r("^"),It=r(` ) ->
Compares two operands and returns a bit pattern that shows which bits are 1 only in one of the operands`),Ct=c(),fe=l("li"),L=l("p"),Mt=r("Bitwise left shift ("),he=l("code"),Ot=r("<< x"),Tt=r(") operation will shift all bits to the left by x positions and esentially double the number for each shift."),Re=c(),X=l("p"),J=l("img"),De=c(),K=l("ul"),x=l("li"),At=r("Bitwise right shift ("),me=l("code"),St=r(">> x"),Rt=r(") operation will shift all bits to the right by x positions and esentially halve the number for each shift."),qe=c(),Q=l("p"),V=l("img"),Ge=c(),Y=l("p"),Dt=r("When shifting bits left/right the left-most/right-most bit will fall in the void of nothingness and disappears out of existence (dramatic music starts playing)"),We=c(),Z=l("h2"),qt=r("Terminology"),Ne=c(),y=l("ul"),ue=l("li"),Gt=r("Least siginificant bit (LSB) is the right most bit"),Wt=c(),be=l("li"),Nt=r("Most significant bit (MSB) is the highest or left most bit that is 1"),Ue=c(),$=l("h2"),Ut=r("Bit manipulation tricks"),Fe=c(),g=l("h4"),Ft=r("Get first bit or LSB"),je=c(),H=l("pre"),ze=c(),ee=l("h4"),jt=r("Number of ones in a bit pattern or Hamming weight"),Xe=c(),P=l("pre"),Je=c(),te=l("h2"),zt=r("Problems"),Ke=c(),u=l("ul"),de=l("li"),I=l("a"),Xt=r("https://leetcode.com/problems/sum-of-two-integers/"),Jt=c(),ye=l("li"),C=l("a"),Kt=r("https://leetcode.com/problems/number-of-1-bits/"),Qt=c(),we=l("li"),M=l("a"),Vt=r("https://leetcode.com/problems/counting-bits/"),this.h()},l(e){d=i(e,"H1",{});var a=o(d);tt=p(a,"A few words about bit manipulation"),a.forEach(t),ve=f(e),O=i(e,"P",{});var ts=o(O);st=p(ts,"Bit manipulation is not a technique that comes often when writing code especially when dealing with higher level languages, regardless it is useful to understand how computers work behind the scene."),ts.forEach(t),ke=f(e),T=i(e,"H2",{});var ss=o(T);at=p(ss,"Bit"),ss.forEach(t),_e=f(e),A=i(e,"P",{});var as=o(A);nt=p(as,"The smallest data use to represent a piece of information in computers are bits and they represent an electrical current that is stored in a memory chip. This bit can either be on or off and the notation 1 and 0 from binary system is used to denote it\u2019s state."),as.forEach(t),Ee=f(e),S=i(e,"H2",{});var ns=o(S);lt=p(ns,"Byte"),ns.forEach(t),Be=f(e),R=i(e,"P",{});var ls=o(R);it=p(ls,"A collection of 8 adjacent bits form a byte or octet. Since it\u2019s comprised of 8 bits that can have the value either 1 or 0, a byte can have a value in the interval [0, 255] (2 to the power of 8 or 256 values)."),ls.forEach(t),Le=f(e),D=i(e,"H3",{});var is=o(D);ot=p(is,"6 representation in a byte:"),is.forEach(t),xe=f(e),q=i(e,"P",{});var os=o(q);G=i(os,"IMG",{src:!0,alt:!0}),os.forEach(t),He=f(e),W=i(e,"P",{});var rs=o(W);rt=p(rs,"Modern computer architechtures use memory registers of size four bytes (32-bit) or eight bytes (64-bit)."),rs.forEach(t),Pe=f(e),N=i(e,"H2",{});var ps=o(N);pt=p(ps,"Endianness"),ps.forEach(t),Ie=f(e),U=i(e,"P",{});var cs=o(U);ct=p(cs,"Endianess refers to the order the bytes are stored in a computer memory. The most common order in processor architecture is called Little-endian where the least significant byte (the byte that contains the smallest bits) is stored in the left or the smallest address memory. In contrast Big-endian will store the least significant byte on the right."),cs.forEach(t),Ce=f(e),w=i(e,"PRE",{class:!0});var Ks=o(w);Ks.forEach(t),Me=f(e),F=i(e,"H2",{});var fs=o(F);ft=p(fs,"Hexadecimal"),fs.forEach(t),Oe=f(e),j=i(e,"P",{});var hs=o(j);ht=p(hs,"While binary system is used to represent the state of the memory capacitor that can only hold 2 states 1 or 0, hexadecimal system (base 16 numeral system) is usually used by memory diagnosters or when the state of the memory needs to be presented in a human readable form. One digit in hex system can represent 16 states or 4 bits which means each byte of data can represented by two hexadecimal digits."),hs.forEach(t),Te=f(e),v=i(e,"PRE",{class:!0});var Qs=o(v);Qs.forEach(t),Ae=f(e),z=i(e,"H2",{});var ms=o(z);mt=p(ms,"Bit operations"),ms.forEach(t),Se=f(e),m=i(e,"UL",{});var b=o(m);ae=i(b,"LI",{});var us=o(ae);k=i(us,"P",{});var Qe=o(k);ut=p(Qe,"Bitwise complement ( "),ne=i(Qe,"CODE",{});var bs=o(ne);bt=p(bs,"~"),bs.forEach(t),dt=p(Qe,` ) ->
Caclulates the complement of a bit pattern by reversing each bit`),Qe.forEach(t),us.forEach(t),yt=f(b),le=i(b,"LI",{});var ds=o(le);_=i(ds,"P",{});var Ve=o(_);wt=p(Ve,"Bitwise logical AND ( "),ie=i(Ve,"CODE",{});var ys=o(ie);vt=p(ys,"&"),ys.forEach(t),kt=p(Ve,` ) ->
Compares two operands and returns a bit pattern that shows which bits are 1 in both of them`),Ve.forEach(t),ds.forEach(t),_t=f(b),oe=i(b,"LI",{});var ws=o(oe);E=i(ws,"P",{});var Ye=o(E);Et=p(Ye,"Bitwise logical OR ( "),re=i(Ye,"CODE",{});var vs=o(re);Bt=p(vs,"|"),vs.forEach(t),Lt=p(Ye,` ) ->
Compares two operands and returns a bit pattern that shows which bits are 1 in either one`),Ye.forEach(t),ws.forEach(t),xt=f(b),pe=i(b,"LI",{});var ks=o(pe);B=i(ks,"P",{});var Ze=o(B);Ht=p(Ze,"Bitwise logical XOR ( "),ce=i(Ze,"CODE",{});var _s=o(ce);Pt=p(_s,"^"),_s.forEach(t),It=p(Ze,` ) ->
Compares two operands and returns a bit pattern that shows which bits are 1 only in one of the operands`),Ze.forEach(t),ks.forEach(t),Ct=f(b),fe=i(b,"LI",{});var Es=o(fe);L=i(Es,"P",{});var $e=o(L);Mt=p($e,"Bitwise left shift ("),he=i($e,"CODE",{});var Bs=o(he);Ot=p(Bs,"<< x"),Bs.forEach(t),Tt=p($e,") operation will shift all bits to the left by x positions and esentially double the number for each shift."),$e.forEach(t),Es.forEach(t),b.forEach(t),Re=f(e),X=i(e,"P",{});var Ls=o(X);J=i(Ls,"IMG",{src:!0,alt:!0}),Ls.forEach(t),De=f(e),K=i(e,"UL",{});var xs=o(K);x=i(xs,"LI",{});var ge=o(x);At=p(ge,"Bitwise right shift ("),me=i(ge,"CODE",{});var Hs=o(me);St=p(Hs,">> x"),Hs.forEach(t),Rt=p(ge,") operation will shift all bits to the right by x positions and esentially halve the number for each shift."),ge.forEach(t),xs.forEach(t),qe=f(e),Q=i(e,"P",{});var Ps=o(Q);V=i(Ps,"IMG",{src:!0,alt:!0}),Ps.forEach(t),Ge=f(e),Y=i(e,"P",{});var Is=o(Y);Dt=p(Is,"When shifting bits left/right the left-most/right-most bit will fall in the void of nothingness and disappears out of existence (dramatic music starts playing)"),Is.forEach(t),We=f(e),Z=i(e,"H2",{});var Cs=o(Z);qt=p(Cs,"Terminology"),Cs.forEach(t),Ne=f(e),y=i(e,"UL",{});var et=o(y);ue=i(et,"LI",{});var Ms=o(ue);Gt=p(Ms,"Least siginificant bit (LSB) is the right most bit"),Ms.forEach(t),Wt=f(et),be=i(et,"LI",{});var Os=o(be);Nt=p(Os,"Most significant bit (MSB) is the highest or left most bit that is 1"),Os.forEach(t),et.forEach(t),Ue=f(e),$=i(e,"H2",{});var Ts=o($);Ut=p(Ts,"Bit manipulation tricks"),Ts.forEach(t),Fe=f(e),g=i(e,"H4",{});var As=o(g);Ft=p(As,"Get first bit or LSB"),As.forEach(t),je=f(e),H=i(e,"PRE",{class:!0});var Vs=o(H);Vs.forEach(t),ze=f(e),ee=i(e,"H4",{});var Ss=o(ee);jt=p(Ss,"Number of ones in a bit pattern or Hamming weight"),Ss.forEach(t),Xe=f(e),P=i(e,"PRE",{class:!0});var Ys=o(P);Ys.forEach(t),Je=f(e),te=i(e,"H2",{});var Rs=o(te);zt=p(Rs,"Problems"),Rs.forEach(t),Ke=f(e),u=i(e,"UL",{});var se=o(u);de=i(se,"LI",{});var Ds=o(de);I=i(Ds,"A",{href:!0,rel:!0});var qs=o(I);Xt=p(qs,"https://leetcode.com/problems/sum-of-two-integers/"),qs.forEach(t),Ds.forEach(t),Jt=f(se),ye=i(se,"LI",{});var Gs=o(ye);C=i(Gs,"A",{href:!0,rel:!0});var Ws=o(C);Kt=p(Ws,"https://leetcode.com/problems/number-of-1-bits/"),Ws.forEach(t),Gs.forEach(t),Qt=f(se),we=i(se,"LI",{});var Ns=o(we);M=i(Ns,"A",{href:!0,rel:!0});var Us=o(M);Vt=p(Us,"https://leetcode.com/problems/counting-bits/"),Us.forEach(t),Ns.forEach(t),se.forEach(t),this.h()},h(){Yt(G.src,$t="/bits.svg")||h(G,"src",$t),h(G,"alt","Bit representation"),h(w,"class","language-cs"),h(v,"class","language-cs"),Yt(J.src,gt="/left-shift.svg")||h(J,"src",gt),h(J,"alt","Bits shifting left one cell"),Yt(V.src,es="/right-shift.svg")||h(V,"src",es),h(V,"alt","Bits shifting right one cell"),h(H,"class","language-cs"),h(P,"class","language-cs"),h(I,"href","https://leetcode.com/problems/sum-of-two-integers/"),h(I,"rel","nofollow"),h(C,"href","https://leetcode.com/problems/number-of-1-bits/"),h(C,"rel","nofollow"),h(M,"href","https://leetcode.com/problems/counting-bits/"),h(M,"rel","nofollow")},m(e,a){n(e,d,a),s(d,tt),n(e,ve,a),n(e,O,a),s(O,st),n(e,ke,a),n(e,T,a),s(T,at),n(e,_e,a),n(e,A,a),s(A,nt),n(e,Ee,a),n(e,S,a),s(S,lt),n(e,Be,a),n(e,R,a),s(R,it),n(e,Le,a),n(e,D,a),s(D,ot),n(e,xe,a),n(e,q,a),s(q,G),n(e,He,a),n(e,W,a),s(W,rt),n(e,Pe,a),n(e,N,a),s(N,pt),n(e,Ie,a),n(e,U,a),s(U,ct),n(e,Ce,a),n(e,w,a),w.innerHTML=js,n(e,Me,a),n(e,F,a),s(F,ft),n(e,Oe,a),n(e,j,a),s(j,ht),n(e,Te,a),n(e,v,a),v.innerHTML=zs,n(e,Ae,a),n(e,z,a),s(z,mt),n(e,Se,a),n(e,m,a),s(m,ae),s(ae,k),s(k,ut),s(k,ne),s(ne,bt),s(k,dt),s(m,yt),s(m,le),s(le,_),s(_,wt),s(_,ie),s(ie,vt),s(_,kt),s(m,_t),s(m,oe),s(oe,E),s(E,Et),s(E,re),s(re,Bt),s(E,Lt),s(m,xt),s(m,pe),s(pe,B),s(B,Ht),s(B,ce),s(ce,Pt),s(B,It),s(m,Ct),s(m,fe),s(fe,L),s(L,Mt),s(L,he),s(he,Ot),s(L,Tt),n(e,Re,a),n(e,X,a),s(X,J),n(e,De,a),n(e,K,a),s(K,x),s(x,At),s(x,me),s(me,St),s(x,Rt),n(e,qe,a),n(e,Q,a),s(Q,V),n(e,Ge,a),n(e,Y,a),s(Y,Dt),n(e,We,a),n(e,Z,a),s(Z,qt),n(e,Ne,a),n(e,y,a),s(y,ue),s(ue,Gt),s(y,Wt),s(y,be),s(be,Nt),n(e,Ue,a),n(e,$,a),s($,Ut),n(e,Fe,a),n(e,g,a),s(g,Ft),n(e,je,a),n(e,H,a),H.innerHTML=Xs,n(e,ze,a),n(e,ee,a),s(ee,jt),n(e,Xe,a),n(e,P,a),P.innerHTML=Js,n(e,Je,a),n(e,te,a),s(te,zt),n(e,Ke,a),n(e,u,a),s(u,de),s(de,I),s(I,Xt),s(u,Jt),s(u,ye),s(ye,C),s(C,Kt),s(u,Qt),s(u,we),s(we,M),s(M,Vt)},p:Zt,i:Zt,o:Zt,d(e){e&&t(d),e&&t(ve),e&&t(O),e&&t(ke),e&&t(T),e&&t(_e),e&&t(A),e&&t(Ee),e&&t(S),e&&t(Be),e&&t(R),e&&t(Le),e&&t(D),e&&t(xe),e&&t(q),e&&t(He),e&&t(W),e&&t(Pe),e&&t(N),e&&t(Ie),e&&t(U),e&&t(Ce),e&&t(w),e&&t(Me),e&&t(F),e&&t(Oe),e&&t(j),e&&t(Te),e&&t(v),e&&t(Ae),e&&t(z),e&&t(Se),e&&t(m),e&&t(Re),e&&t(X),e&&t(De),e&&t(K),e&&t(qe),e&&t(Q),e&&t(Ge),e&&t(Y),e&&t(We),e&&t(Z),e&&t(Ne),e&&t(y),e&&t(Ue),e&&t($),e&&t(Fe),e&&t(g),e&&t(je),e&&t(H),e&&t(ze),e&&t(ee),e&&t(Xe),e&&t(P),e&&t(Je),e&&t(te),e&&t(Ke),e&&t(u)}}}const sa={title:"A few words about bit manipulation",tags:["blog"]};class aa extends Zs{constructor(d){super(),$s(this,d,null,ea,gs,{})}}export{aa as default,sa as metadata};
