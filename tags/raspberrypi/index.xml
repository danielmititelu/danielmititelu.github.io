<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>raspberrypi on Home</title><link>https://danielmititelu.github.io/tags/raspberrypi/</link><description>Recent content in raspberrypi on Home</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://danielmititelu.github.io/tags/raspberrypi/index.xml" rel="self" type="application/rss+xml"/><item><title>Gadget mode on raspberry pi</title><link>https://danielmititelu.github.io/raspberrypi/gadget-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielmititelu.github.io/raspberrypi/gadget-mode/</guid><description>Gadget mode enables a raspberry pi to be connected and controlled by a computer with only a usb cable
Flash raspberry pi os(the full or lite version) on an SD card and modify the following in the boot folder:
in config.txt add dtoverlay=dwc2 at the end of the file in cmdline.txt add modules-load=dwc2,g_ether after rootwait word create a file name ssh (without extension) You should be able to connect to the pi now:</description></item><item><title>Plant watering system part 1 - Prototype</title><link>https://danielmititelu.github.io/projects/plant-watering-system/part-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielmititelu.github.io/projects/plant-watering-system/part-1/</guid><description>This project is meant to keep my plants healthy while I go on vacations.
Parts required Raspberry Pi Zero (will work with any Raspberry Pi) micro usb power supply 3v-5v pump small hose for the pump 5v relay wires Wiring diagram Relay inputs:
NO = normally opened NC = normally closed CO = common DC- = ground DC+ = 5V signal IN = signal Code Simple python code to send a signal to pin 8 for 0.</description></item><item><title>Plant watering system part 2 - Switching to Raspberry Pi Pico</title><link>https://danielmititelu.github.io/projects/plant-watering-system/part-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielmititelu.github.io/projects/plant-watering-system/part-2/</guid><description>A linux computer like the Raspberry Pi Zero used in the prototype is overkill for this application and a more suitable candidate is a microcontroller like the Raspberry Pi Pico.
Wiring diagram Code I used Arduino IDE to write a simple program that will open the pump for 10 seconds every 2 days.
const unsigned long SECOND = 1000; const unsigned long MINUTE = SECOND * 60; const unsigned long HOUR = MINUTE * 60; const unsigned long DAY = HOUR * 24; int pin = 16; void setup() { pinMode(pin, OUTPUT); } void loop() { openPump(); delay(2 * DAY); } void openPump() { digitalWrite(pin, HIGH); delay(10 * SECOND); digitalWrite(pin, LOW); } Result Useful links https://datasheets.</description></item><item><title>Plant watering system part 3 - Multiple plants</title><link>https://danielmititelu.github.io/projects/plant-watering-system/part-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielmititelu.github.io/projects/plant-watering-system/part-3/</guid><description>In order to water multiple plants I designed and 3d printed a simple T-shape connector: I could have just made a hole in the hose for each pot but this is a bit more elegant solution.</description></item><item><title>Plant watering system part 4 - Improving the code</title><link>https://danielmititelu.github.io/projects/plant-watering-system/part-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielmititelu.github.io/projects/plant-watering-system/part-4/</guid><description>While Arduino studio is awesome, it didn&amp;rsquo;t seem to have the best support for the Raspberry Pi Pico. The recommended languages for the Pico are C++ and Python and I decided to go with Python.
I rewrite the code in Python and did the following improvements:
connect the board to wi-fi get the time from a NTP(Network Time Protocol) server open the pump every two days at 12:00 Check the github repo for the code.</description></item><item><title>SSH key-based auth</title><link>https://danielmititelu.github.io/raspberrypi/ssh-key-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielmititelu.github.io/raspberrypi/ssh-key-auth/</guid><description> Generate a public/private key pair and ssh-keygen # add `~/.ssh/pi_rsa` when prompted for which file to save the key Move the public key to the raspberry pi ssh-copy-id -i ~/.ssh/pi_rsa.pub pi@raspberrypi.local SSH into the raspberry pi ssh pi@raspberrypi.local</description></item></channel></rss>